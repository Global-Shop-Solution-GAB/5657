Program.Sub.Preflight.Start
V.Global.bExists.Declare
V.Global.iPrintAudit.Declare
V.Global.bLongPart.Declare
V.Global.bLoadData.Declare
v.Global.bCustomMultiPartTrack.Declare
v.Global.bEditWO.Declare(boolean)
v.Global.bEditPart.Declare(boolean)
v.Global.bViewWO.Declare(boolean)
v.Global.bViewPart.Declare(boolean)
v.Global.bReplUpdReschedUtility.Declare(boolean)
v.Global.bIssue.Declare(boolean)
v.Global.bWipToFG.Declare(boolean)
v.Global.bPONotes.Declare(boolean)

v.Global.sSalesPerson.Declare(string)
v.Global.sCustomers.Declare(string)
v.Global.sProjects.Declare(string)
v.Global.sPhases.Declare(string)
v.Global.sSQLQueries.Declare(string)
v.Global.sRows.Declare(string)
v.Global.sCustomer.Declare
v.Global.sSalesOrder.Declare

V.Global.sAllWOFilter.Declare
v.Global.sAllMatFilter.Declare
v.Global.sAllOutFilter.Declare

v.Global.iVendRow.Declare


Program.Sub.Preflight.End

Program.Sub.PrelimCheck.Start
f.Intrinsic.Control.Try
	v.Local.sret.Declare
	
	'Check PO/WO Note Option
	f.ODBC.Connection!con.ExecuteAndReturn("SELECT F_BOOLEAN FROM OP_HEADER WHERE ID='080001' AND SEQUENCE='0001'",v.Local.sRet)
	f.Intrinsic.Control.If(v.Local.sret.trim,=,"1")
		v.global.bPONotes.Set(true)
	f.Intrinsic.Control.EndIf
	
	'Check and make sure custom tables exist
	F.Intrinsic.Control.CallSub(checktable)
	
	'Set anchors and check long part
	F.Intrinsic.Control.CallSub(CheckLongPart)
	
	'Check Print Audit Option
	F.Global.General.ReadOption(400367,3,0000,V.Global.iPrintAudit)
	
	'Load Vendors
	f.Data.DataTable.CreateFromSQL("dtVendors","con","SELECT NAME_VENDOR, VENDOR FROM V_VENDOR_MASTER ORDER BY NAME_VENDOR",true)
	
	'Check User Permissions
	f.Intrinsic.Control.CallSub(CheckPermissions)
	
	'Check for long part
	f.Intrinsic.Control.CallSub(CheckLongPart)
	
f.Intrinsic.Control.Catch

f.Intrinsic.Control.EndTry
Program.Sub.PrelimCheck.End

Program.Sub.cleanQuery.Start
f.Intrinsic.Control.Try
	v.Local.sRet.Declare
	v.Local.sRet.Set(v.Args.Query)
	f.Intrinsic.Control.If(v.Args.Active,=,True)
		f.Intrinsic.String.Replace(v.Local.sRet,"C.DATE_CLOSED='1900-01-01'","1=1",v.Local.sRet)
		F.Intrinsic.String.Replace(V.Local.sRet,"E.DATE_CLOSED='1900-01-01'","1=1",v.Local.sRet)
		f.Intrinsic.String.Replace(v.Local.sRet,"DATE_CLOSED = '1900-1-1'","1=1",v.Local.sRet)
		f.Intrinsic.String.Replace(v.Local.sRet,"FLAG_CLOSED <> 'Y'","1=1",v.Local.sRet)
	f.Intrinsic.Control.EndIf
	f.Intrinsic.Variable.AddRV("rSQL",v.Local.sRet)
f.Intrinsic.Control.Catch
	F.Intrinsic.String.Build("Project: {0}{1}{1}Subroutine: {2}{1}Error Occurred {3} with description {4}{1}{1}GAB Version: {5}",V.Ambient.ScriptPath,V.Ambient.Newline,V.Ambient.CurrentSubroutine,V.Ambient.ErrorNumber,V.Ambient.ErrorDescription,V.Ambient.GABVersion,V.Local.sError)
	F.Intrinsic.UI.Msgbox(V.Local.sError)
f.Intrinsic.Control.EndTry
Program.Sub.cleanQuery.End

Program.Sub.CheckTable.Start
	F.Intrinsic.Control.Try
	V.Local.sError.Declare
	
	v.Local.bTable.Declare(Boolean)

	F.ODBC.Connection!con.TableExists("GAB_4169_WO_NOTES",V.Local.bTable)
	F.Intrinsic.Control.If(v.Local.bTable,=,False)
		F.ODBC.Connection!Con.Execute("CREATE TABLE GAB_4169_WO_NOTES(JOB CHAR(6),SUFFIX CHAR(3),NOTES LONGVARCHAR);")
		F.ODBC.Connection!Con.Execute("CREATE INDEX GAB_4169_WO_NOTES01 USING 1 ON GAB_4169_WO_NOTES(JOB);")
		F.ODBC.Connection!Con.Execute("CREATE INDEX GAB_4169_WO_NOTES02 USING 2 ON GAB_4169_WO_NOTES(SUFFIX);")
	F.Intrinsic.Control.EndIf
	
	F.ODBC.Connection!con.TableExists("GAB_4169_WO_NOTESLOG",V.Local.bTable)
	f.Intrinsic.Control.If(v.Local.bTable,=,False)
		F.ODBC.Connection!Con.Execute("CREATE TABLE GAB_4169_WO_NOTESLOG  ( JOB_PO CHAR(7), SUFFIX CHAR(4), NOTES LONGVARCHAR, USERID VARCHAR(8), DATECHANGE DATETIME DEFAULT NOW(), FIELD VARCHAR(50) );")
		f.ODBC.Connection!con.Execute("CREATE INDEX GAB_4169_WO_NOTESL01 USING 1 ON GAB_4169_WO_NOTESLOG ( JOB_PO );")
		f.ODBC.Connection!con.Execute("CREATE INDEX GAB_4169_WO_NOTESL02 USING 2 ON GAB_4169_WO_NOTESLOG ( SUFFIX );")
	f.Intrinsic.Control.EndIf
	
	
	F.ODBC.Connection!con.TableExists("GAB_5657_DTALL",V.Local.bTable)
	f.Intrinsic.Control.If(v.Local.bTable,=,False)
		F.ODBC.Connection!Con.Execute("CREATE TABLE GAB_5657_DTOPER  (SelectWO BIT NOT NULL,DISPLAY_PART LONGVARCHAR,PRINTED BIT NOT NULL,RELEASED BIT NOT NULL,FLAG_HOLD BIT NOT NULL,PrtDocCntrl VARCHAR(20),MaterialIssue VARCHAR(20),WOLabel VARCHAR(20),Seq VARCHAR(6),SEQRES LONGVARCHAR,StartDate DATE,DueDate DATE,SALES_ORDER VARCHAR(7),SALES_ORDER_LINE VARCHAR(4),SALESORDERLINE VARCHAR(11),JobStatus VARCHAR(20),NAME_CUSTOMER VARCHAR(30),CodeSort VARCHAR(30),DISPLAY_PART1 LONGVARCHAR,DESCRIPTION VARCHAR(30),QTY_ORDER DOUBLE,DATE_DUE DATE,CUR_OPER VARCHAR(20),EST_HRS DOUBLE,ACT_HRS DOUBLE,REM_HRS DOUBLE,NEXT_OPER VARCHAR(20),OUTSIDE LONGVARCHAR,DAYS_LATE INTEGER,JobSteps LONGVARCHAR,CUSTOMER_PO VARCHAR(20),PROJECT VARCHAR(7),SALESPERSON VARCHAR(3),PartFriendly LONGVARCHAR,PCS_REM1 DOUBLE,DATE_DUE_FLOAT DATE,DATE_DUE_NO_FLOAT DATE,SCHEDULED_DUE_DATE DATE,DATE_ORIG_DUE DATE,DAYS_LATE_NO_FLOAT DATE,TOT_HRS_REM DOUBLE,DEPT VARCHAR(4),CUR_OPER_DATE DATE,SHIP_TO_OP LONGVARCHAR,WO_NOTE LONGVARCHAR,WO_NOTE2 LONGVARCHAR,PRICE_EXT DOUBLE,AMT_MATERIAL DOUBLE,AMT_LABOR DOUBLE,AMT_OVERHEAD DOUBLE,OUTS DOUBLE,FREIGHT DOUBLE,OTHER DOUBLE,TOTALCOST DOUBLE,CodeSort2 VARCHAR(30),PRIORITY VARCHAR(20),PART LONGVARCHAR,LOCATION VARCHAR(2),PRODUCT_LINE VARCHAR(3),DATE_OPENED DATE,DATE_START DATE,JS VARCHAR(9),IND_FLAG VARCHAR(20),LATE VARCHAR(20),PCS_REM VARCHAR(20) NOT NULL,SOUSER_3 VARCHAR(30),SOUSER_4 VARCHAR(30),SOUSER_5 VARCHAR(30),SONotes LONGVARCHAR,RowChange VARCHAR(50),SODate DATE,SOTerms VARCHAR(20),PHASE VARCHAR(4),JOB VARCHAR(6),SUFFIX VARCHAR(3),AMT_PRICE_PER_UNIT DOUBLE,JSS VARCHAR(15) NOT NULL )")
		F.ODBC.Connection!con.Execute("CREATE TABLE GAB_5657_DTALL  (SelectWO BIT NOT NULL,DISPLAY_PART LONGVARCHAR,PRINTED BIT NOT NULL,RELEASED BIT NOT NULL,FLAG_HOLD BIT NOT NULL,PrtDocCntrl VARCHAR(20),WOLabel VARCHAR(20),MaterialIssue VARCHAR(20),JobStatus VARCHAR(20),NAME_CUSTOMER VARCHAR(30),CodeSort VARCHAR(30),SALES_ORDER VARCHAR(7),SALES_ORDER_LINE VARCHAR(4),SALESORDERLINE VARCHAR(12),CUSTOMER_PO VARCHAR(20),PROJECT VARCHAR(7),SALESPERSON VARCHAR(3),DISPLAY_PART1 VARCHAR(50),PartFriendly VARCHAR(50),DESCRIPTION VARCHAR(30),QTY_ORDER DOUBLE,PCS_REM1 DOUBLE,DATE_DUE DATE,DATE_DUE_FLOAT DATE,DATE_DUE_NO_FLOAT DATE,SCHEDULED_DUE_DATE DATE,DATE_ORIG_DUE DATE,DAYS_LATE INTEGER,DAYS_LATE_NO_FLOAT INTEGER,EST_HRS DOUBLE,ACT_HRS DOUBLE,REM_HRS DOUBLE,TOT_HRS_REM DOUBLE,DEPT VARCHAR(4),CUR_OPER_DATE DATE,JobSteps LONGVARCHAR,CUR_OPER VARCHAR(20),NEXT_OPER VARCHAR(20),OUTSIDE LONGVARCHAR,SHIP_TO_OP LONGVARCHAR,WO_NOTE LONGVARCHAR,WO_NOTE2 LONGVARCHAR,PRICE_EXT DOUBLE,AMT_MATERIAL DOUBLE,AMT_LABOR DOUBLE,AMT_OVERHEAD DOUBLE,OUTS DOUBLE,FREIGHT DOUBLE,OTHER DOUBLE,TOTALCOST DOUBLE,CodeSort2 VARCHAR(100),PRIORITY VARCHAR(10),PART LONGVARCHAR,LOCATION VARCHAR(2),PRODUCT_LINE VARCHAR(2),DATE_OPENED DATE,DATE_START DATE,JS VARCHAR(10) NOT NULL,IND_FLAG BIT NOT NULL,LATE BIT NOT NULL,PCS_REM VARCHAR(20),SOUser_3 VARCHAR(30),SOUser_4 VARCHAR(30),SOUser_5 VARCHAR(30),SONotes LONGVARCHAR,RowChange VARCHAR(10),SODate DATE,SOTerms VARCHAR(20),PHASE VARCHAR(4),JOB VARCHAR(6),SUFFIX VARCHAR(3),AMT_PRICE_PER_UNIT DOUBLE,MyRowID INTEGER )")
	f.Intrinsic.Control.EndIf
	
	f.ODBC.Connection!con.TableExists("GAB_6196_MULTI_PART_TRACK",v.Global.bCustomMultiPartTrack)
	
	'Check Index
	f.Intrinsic.Control.CallSub("Check_Index","sTable","Job_Operations","sIndex","JOBOP565701")
	f.Intrinsic.Control.If(v.Args.bExist,=,False)
		f.ODBC.Connection!con.Execute("CREATE INDEX JOBOP565701  ON JOB_OPERATIONS ( FLAG_CLOSED, LMO, SEQ, JOB );")
	f.Intrinsic.Control.EndIf	
	
	F.Intrinsic.Control.Catch
		F.Intrinsic.String.Build("Project: {0}{1}{1}Subroutine: {2}{1}Error Occurred {3} with description {4}{1}{1}GAB Version: {5}",V.Ambient.ScriptPath,V.Ambient.Newline,V.Ambient.CurrentSubroutine,V.Ambient.ErrorNumber,V.Ambient.ErrorDescription,V.Ambient.GABVersion,V.Local.sError)
		F.Intrinsic.UI.Msgbox(V.Local.sError)
		F.Intrinsic.Control.End 
	F.Intrinsic.Control.EndTry
Program.Sub.CheckTable.End

Program.Sub.Check_Index.Start
f.Intrinsic.Control.Try
	v.Local.sError.Declare
	v.Local.sSQL.Declare
	v.Local.sRet.Declare
	v.Local.bExist.Declare
	
	f.Intrinsic.String.Build("Select Xf$Name As TableName,F1.XE$Name As FieldName,F1.Xe$DataType as DataType FROM X$File INNER JOIN X$Field F1 On F1.XE$File = XF$ID WHERE Xf$Name = '{0}' and F1.XE$Name = '{1}'",v.Args.sTable,v.Args.sIndex,v.Local.sSQL)
	f.ODBC.Connection!con.ExecuteAndReturn(v.Local.sSQL,v.Local.sRet)
	f.Intrinsic.Control.If(v.Ambient.ExecuteAndReturnEOF.Not)
		v.Local.bExist.Set(True)
	f.Intrinsic.Control.EndIf
	f.Intrinsic.Variable.AddRV("bExist",v.Local.bExist)
	
	F.Intrinsic.Control.Catch
		F.Intrinsic.String.Build("Project: {0}{1}{1}Subroutine: {2}{1}Error Occurred {3} with description {4}{1}{1}GAB Version: {5}",V.Ambient.ScriptPath,V.Ambient.Newline,V.Ambient.CurrentSubroutine,V.Ambient.ErrorNumber,V.Ambient.ErrorDescription,V.Ambient.GABVersion,V.Local.sError)
		F.Intrinsic.UI.Msgbox(V.Local.sError)
		'if any error, assume the index exists
		f.Intrinsic.Variable.AddRV("bExist",True)		
	F.Intrinsic.Control.EndTry	

Program.Sub.Check_Index.End

Program.Sub.CheckLongPart.Start
	F.Intrinsic.Control.Try
	V.Local.sError.Declare
	
	' System Support > Administration > Company Options (Advanced) > Inventory
	'	At the bottom, either Use Long Part (Large Inventory) or Use Long Part (Small Inventory)
	F.Global.General.ReadOption("400861",0,False,"0000",V.Global.bLongPart)
	F.Intrinsic.Control.If(V.Global.bLongPart,=,False)
		F.Global.General.ReadOption("400861",0,False,"0004",V.Global.bLongPart)
	F.Intrinsic.Control.EndIf
	
	F.Intrinsic.Control.Catch
		F.Intrinsic.String.Build("Project: {0}{1}{1}Subroutine: {2}{1}Error Occurred {3} with description {4}{1}{1}GAB Version: {5}",V.Ambient.ScriptPath,V.Ambient.Newline,V.Ambient.CurrentSubroutine,V.Ambient.ErrorNumber,V.Ambient.ErrorDescription,V.Ambient.GABVersion,V.Local.sError)
		F.Intrinsic.UI.Msgbox(V.Local.sError)
		F.Intrinsic.Control.End 
	F.Intrinsic.Control.EndTry
Program.Sub.CheckLongPart.End

Program.Sub.ProgramData.Start
F.Intrinsic.Control.Try
	V.Local.sError.Declare
	V.Local.iCnt.Declare
	V.Local.iProgress.Declare
	v.Local.iMax.Declare
	V.Local.i2.Declare
	v.Local.iHolder.Declare
	v.Local.bActive.Declare
	
	V.Local.sSQL.Declare
	v.Local.sSql2.Declare
	v.Local.sSql3.Declare
	v.Local.sSql4.Declare
	v.Local.sRetVar.Declare
	V.Local.sRet.Declare
	V.Local.sJob.Declare
	V.Local.sSuffix.Declare
	V.Local.sGabpath.Declare
	V.Local.fEstHrs.Declare
	V.Local.fRemHrs.Declare
	V.Local.fPcsRem.Declare
	V.Local.sDept.Declare
	V.Local.sCurOper.Declare
	V.Local.dCurOperDate.Declare
	V.Local.sNextOper.Declare
	V.Local.sOutside.Declare
	v.Local.sfile.Declare
	v.Local.sCMarkFile.Declare
	v.Local.sJobSteps.Declare
	v.Local.sMark.Declare
	v.Local.sFilter.Declare
	v.Local.sMinJob.Declare
	v.Local.sUser4.Declare
	v.Local.sUser5.Declare
	V.Local.sNotes.Declare
	v.Local.sDay.Declare
	v.Local.sMonth.Declare
	v.Local.sYear.Declare
	v.Local.sSeq.Declare
	V.Local.sStep.Declare
	V.Local.sJS.Declare
	V.Local.sXML.Declare
	
	v.Local.dDateFull.Declare
	v.Local.dNewDate.Declare
	v.Local.dNewDateNoFloat.Declare
	v.Local.dNewDateWithFloat.Declare
	v.Local.sCustPO.Declare
	v.Local.sSearch.Declare
	v.Local.sJobStatus.Declare
	v.Local.sFileDt.Declare
	v.Local.x.Declare(long)
	v.Local.lret.Declare
	v.Local.lMax.Declare
	v.Local.iDaysLate.Declare
	v.Local.iDaysLateNoFloat.Declare
	v.Local.iDaysLateRecip.Declare
	v.Local.iDaysLateNoFloatRecip.Declare
	v.Local.iDaysSub.Declare
	v.Local.j.Declare(long)
	v.Local.fTotRemain.Declare
	v.Local.fTotRemainNoFloat.Declare
	v.Local.fTotRemainRecip.Declare
	v.Local.fTotRemainNoFloatRecip.Declare
	v.Local.fTemp.Declare
	
	V.Local.dShipDate.Declare
	V.Local.dDateCheck.Declare(Date,01/01/1900)
	V.Local.bDictExists.Declare

	F.Intrinsic.Control.If(V.DataTable.dtAll.Exists,=,True)
		F.Data.DataTable.Close("dtAll")
	F.Intrinsic.Control.EndIf
	
	F.Intrinsic.Control.If(V.DataTable.DTALL2.Exists,=,True)
		f.Data.DataTable.Close("dtAll2")
	F.Intrinsic.Control.EndIf
	
	F.Intrinsic.Control.If(V.DataTable.dtAllX.Exists,=,True)
		f.Data.DataTable.Close("dtAllX")
	F.Intrinsic.Control.EndIf
	
	F.Intrinsic.Control.If(V.DataTable.dtOper.Exists,=,True)
		f.Data.DataTable.Close("dtOper")
	F.Intrinsic.Control.EndIf
	
	F.Intrinsic.Control.If(V.DataTable.dtAllO.Exists,=,True)
		f.Data.DataTable.Close("dtAllO")
	F.Intrinsic.Control.EndIf
	
	F.Intrinsic.Control.If(V.DataTable.dtAllM.Exists,=,True)
		f.Data.DataTable.Close("dtAllM")
	F.Intrinsic.Control.EndIf
	
'	f.Intrinsic.Control.If(v.DataTable.MO.Exists)
'		f.Data.DataTable.Close("MO")
'	f.Intrinsic.Control.EndIf
'	
'	f.Intrinsic.Control.If(v.Dataview.MO!dvMO.Exists)
'		f.Data.Dataview.Close("MO","dvMO")
'	f.Intrinsic.Control.EndIf
	
	f.Intrinsic.Control.If(v.Screen.FrmMaster!chkClosed.Value,=,"1")
		v.Local.bActive.Set(True)
	f.Intrinsic.Control.EndIf
	
	'SQL is All Work Orders
	'SQL2 is work centre tab
	'SQL3 is materials purchasing
	'SQL4 is outside process purchasing
	f.Intrinsic.Control.if(v.Args.salesorder.Trim,=,"")
	f.Intrinsic.Control.AndIf(v.Args.Customer.Trim,=,"")
		v.Local.ssql.Set("SELECT CAST(0 AS BIT) AS 'SelectWO', ' ' AS 'DISPLAY_PART', CAST(CASE WHEN FLAG_WO_PRTD = 'Y' OR FLAG_WO_PRTD = 'R' THEN 1 ELSE 0 END AS BIT) AS PRINTED, CAST(CASE WHEN FLAG_WO_RELEASED = 'Y' THEN 1 ELSE 0 END AS BIT) AS RELEASED, CASE WHEN VJH.FLAG_HOLD = 'Y' THEN CONVERT(1,SQL_BIT) WHEN VJH.FLAG_HOLD = 'N' THEN CONVERT(0,SQL_BIT) ELSE CONVERT(0,SQL_BIT) END AS FLAG_HOLD, ' ' as 'PrtDocCntrl', CONCAT(VJH.JOB,CONCAT('-',VJH.SUFFIX)) AS 'WOLabel',  ' ' AS 'MaterialIssue', ' ' AS 'JobStatus', VCM.NAME_CUSTOMER AS NAME_CUSTOMER,  ' ' AS 'CodeSort', if(VJH.SALES_ORDER='0000000','',VJH.SALES_ORDER) AS 'SALES_ORDER', if(VJH.SALES_ORDER_LINE='000','',VJH.SALES_ORDER_LINE) AS 'SALES_ORDER_LINE',  CONCAT(VJH.SALES_ORDER,concat(VJH.SALES_ORDER_LINE,0)) AS 'SALESORDERLINE',  CUSTOMER_PO, VJH.PROJECT, VJH.SALESPERSON, ' ' As DISPLAY_PART, '' AS 'PartFriendly', VJH.PART_DESCRIPTION AS DESCRIPTION, QTY_ORDER, QTY_ORDER - QTY_COMPLETED AS PCS_REM1, DATE_DUE, DATE_DUE-1 AS 'DATE_DUE_NEW', CONVERT('1900-01-01',SQL_DATE) AS 'DATE_DUE_FLOAT', CONVERT('1900-01-01',SQL_DATE) AS 'DATE_DUE_NO_FLOAT', SCHEDULED_DUE_DATE, DATE_ORIG_DUE, CONVERT(0,SQL_FLOAT) AS 'DAYS_LATE', CONVERT(0,SQL_FLOAT) as 'DAYS_LATE_NO_FLOAT',  CONVERT(0.00,SQL_FLOAT) AS EST_HRS,NUM_HOURS AS ACT_HRS,CONVERT(0.00,SQL_FLOAT) AS REM_HRS,CONVERT(0.00,SQL_FLOAT) AS TOT_HRS_REM,' ' AS DEPT, CONVERT(NULL,SQL_DATE) AS CUR_OPER_DATE, ' ' as 'JobSteps', ' ' AS CUR_OPER, ' ' AS NEXT_OPER, ' ' AS OUTSIDE, CONVERT(NULL,SQL_DATE) AS SHIP_TO_OP, GWN.NOTES AS 'WO_NOTE', RTRIM(VWUF.USER_1) AS 'User1', RTRIM(VWUF.USER_6) AS 'WO_NOTE2', (VJH.AMT_PRICE_PER_UNIT * QTY_ORDER) AS 'PRICE_EXT', VJH.AMT_MATERIAL, VJH.AMT_LABOR, VJH.AMT_OVERHEAD, VJH.OUTS, VJH.FREIGHT, VJH.OTHER, (VJH.AMT_MATERIAL + VJH.AMT_LABOR + VJH.AMT_OVERHEAD + VJH.OUTS + VJH.FREIGHT + VJH.OTHER) AS 'TOTALCOST', '' AS 'CodeSort2', PRIORITY,  RTRIM(COALESCE(VJH.PART,'')) AS PART,VJH.LOCATION,VJH.PRODUCT_LINE, DATE_OPENED,(SELECT TOP 1 VJO.DATE_START FROM V_JOB_OPERATIONS VJO WHERE VJO.LMO = 'L' AND VJO.JOB = VJH.JOB AND VJO.SUFFIX = VJH.SUFFIX AND VJO.SEQ < '990000') AS DATE_START, CONCAT(VJH.JOB,VJH.SUFFIX) AS JS,CONVERT(0,SQL_BIT) AS IND_FLAG,CONVERT(0,SQL_BIT) AS LATE,'' AS PCS_REM, '' as 'SOUSER_3', '' as 'SOUSER_4', '' as 'SOUSER_5', '' as 'SONotes', '' AS 'RowChange', CONVERT('1900-01-01',SQL_DATE) as 'SODate', ' ' as 'SOTerms', VJH.PHASE, VJH.JOB, VJH.SUFFIX, VJH.AMT_PRICE_PER_UNIT FROM V_JOB_HEADER VJH LEFT JOIN V_CUSTOMER_MASTER VCM ON VJH.CUSTOMER=VCM.CUSTOMER  LEFT JOIN V_WO_USER_FLDS VWUF ON VJH.JOB = VWUF.JOB AND VJH.SUFFIX = VWUF.SUFFIX LEFT JOIN GAB_4169_WO_NOTES GWN ON VJH.JOB = GWN.JOB AND VJH.SUFFIX = GWN.SUFFIX LEFT JOIN V_ORDER_TO_WO OWO ON VJH.JOB = OWO.JOB AND VJH.SUFFIX = OWO.SUFFIX LEFT JOIN V_ORDER_LINES VOL ON OWO.ORDER_NO = VOL.ORDER_NO AND OWO.ORDER_LINE = VOL.RECORD_NO LEFT JOIN V_ORDER_BILL_TO VOB ON VOL.ORDER_NO = VOB.ORDER_NO WHERE DATE_CLOSED = '1900-1-1' AND LEFT(VJH.JOB,1)<>'Z'  ORDER BY WOLabel, DATE_DUE;")
		v.Local.ssql2.Set("SELECT CAST(0 AS BIT) AS 'SelectWO',' ' AS 'DISPLAY_PART',CAST(CASE WHEN FLAG_WO_PRTD = 'Y' OR FLAG_WO_PRTD = 'R' THEN 1 ELSE 0 END AS BIT) AS PRINTED, CAST(CASE WHEN FLAG_WO_RELEASED = 'Y' THEN 1 ELSE 0 END AS BIT) AS RELEASED, CASE WHEN VJH.FLAG_HOLD = 'Y' THEN CONVERT(1,SQL_BIT) WHEN VJH.FLAG_HOLD = 'N' THEN CONVERT(0,SQL_BIT) ELSE CONVERT(0,SQL_BIT) END AS FLAG_HOLD, ' ' as 'PrtDocCntrl', ' ' AS 'MaterialIssue', CONCAT(VJH.JOB,CONCAT('-',VJH.SUFFIX)) AS 'WOLabel', APS.SEQ, RTRIM(APS.SEQRES) AS 'SEQRES', APS.StartDate, APS.DueDate, if(VJH.SALES_ORDER='0000000','',VJH.SALES_ORDER) AS 'SALES_ORDER', if(VJH.SALES_ORDER_LINE='000','',VJH.SALES_ORDER_LINE) AS 'SALES_ORDER_LINE',   CONCAT(VJH.SALES_ORDER,concat(VJH.SALES_ORDER_LINE,0)) AS 'SALESORDERLINE', ' ' AS 'JobStatus', VCM.NAME_CUSTOMER AS NAME_CUSTOMER,  ' ' AS 'CodeSort', ' ' As DISPLAY_PART, VJH.PART_DESCRIPTION AS DESCRIPTION, QTY_ORDER, DATE_DUE, ' ' AS CUR_OPER, (InitSU+HoursOrig) AS EST_HRS, HoursAppl AS ACT_HRS, (InitSU+HoursOrig) - HoursAppl AS REM_HRS, ' ' AS NEXT_OPER, ' ' AS OUTSIDE, CONVERT(0,SQL_FLOAT) AS 'DAYS_LATE', ' ' as 'JobSteps', CUSTOMER_PO, VJH.PROJECT, VJH.SALESPERSON, '' AS 'PartFriendly', QTY_ORDER - QTY_COMPLETED AS PCS_REM1, CONVERT('1900-01-01',SQL_DATE) AS 'DATE_DUE_FLOAT', CONVERT('1900-01-01',SQL_DATE) AS 'DATE_DUE_NO_FLOAT', SCHEDULED_DUE_DATE, DATE_ORIG_DUE, CONVERT(0,SQL_FLOAT) as 'DAYS_LATE_NO_FLOAT', CONVERT(0.00,SQL_FLOAT) AS TOT_HRS_REM,' ' AS DEPT, CONVERT(NULL,SQL_DATE) AS CUR_OPER_DATE,   CONVERT(NULL,SQL_DATE) AS SHIP_TO_OP, GWN.NOTES AS 'WO_NOTE',RTRIM(VWUF.USER_1) AS 'User1', RTRIM(VWUF.USER_6) AS 'WO_NOTE2', (VJH.AMT_PRICE_PER_UNIT * QTY_ORDER) AS 'PRICE_EXT', VJH.AMT_MATERIAL, VJH.AMT_LABOR, VJH.AMT_OVERHEAD, VJH.OUTS, VJH.FREIGHT, VJH.OTHER, (VJH.AMT_MATERIAL + VJH.AMT_LABOR + VJH.AMT_OVERHEAD + VJH.OUTS + VJH.FREIGHT + VJH.OTHER) AS 'TOTALCOST', '' AS 'CodeSort2', PRIORITY,  RTRIM(COALESCE(VJH.PART,'')) AS PART,VJH.LOCATION,VJH.PRODUCT_LINE, DATE_OPENED,(SELECT TOP 1 VJO.DATE_START FROM V_JOB_OPERATIONS VJO WHERE VJO.LMO = 'L' AND VJO.JOB = VJH.JOB AND VJO.SUFFIX = VJH.SUFFIX AND VJO.SEQ < '990000') AS DATE_START, CONCAT(VJH.JOB,VJH.SUFFIX) AS JS,CONVERT(0,SQL_BIT) AS IND_FLAG,CONVERT(0,SQL_BIT) AS LATE,'' AS PCS_REM,  '' as 'SOUSER_3', '' as 'SOUSER_4', '' as 'SOUSER_5', '' as 'SONotes', '' AS 'RowChange', CONVERT('1900-01-01',SQL_DATE) as 'SODate', ' ' as 'SOTerms', VJH.PHASE, VJH.JOB, VJH.SUFFIX, VJH.AMT_PRICE_PER_UNIT, APS.JSS FROM V_JOB_HEADER VJH LEFT JOIN V_CUSTOMER_MASTER VCM ON VJH.CUSTOMER=VCM.CUSTOMER  LEFT JOIN V_WO_USER_FLDS VWUF ON VJH.JOB = VWUF.JOB AND VJH.SUFFIX = VWUF.SUFFIX LEFT JOIN GAB_4169_WO_NOTES GWN ON VJH.JOB = GWN.JOB AND VJH.SUFFIX = GWN.SUFFIX LEFT JOIN V_ORDER_TO_WO OWO ON VJH.JOB = OWO.JOB AND VJH.SUFFIX = OWO.SUFFIX LEFT JOIN V_ORDER_LINES VOL ON OWO.ORDER_NO = VOL.ORDER_NO AND OWO.ORDER_LINE = VOL.RECORD_NO LEFT JOIN V_ORDER_BILL_TO VOB ON VOL.ORDER_NO = VOB.ORDER_NO LEFT JOIN APSV3_JBLines APS ON VJH.JOB = APS.JOB AND VJH.SUFFIX = APS.SFX AND APS.SEQTYPE = 1 AND IFNULL(APS.COMPLDATE,'1900-01-01')='1900-01-01' WHERE DATE_CLOSED = '1900-1-1' AND LEFT(VJH.JOB,1)<>'Z'  ORDER BY WOLabel, SEQ, DATE_DUE")
		v.Local.ssql3.Set("SELECT DISTINCT A.LMO,CAST(0 AS BIT) AS 'SelectWO',' ' AS 'DISPLAY_PART', ' ' as 'PrtDocCntrl',  C.DATE_DUE, ' ' AS 'CUR_OPER', ' ' AS 'MaterialIssue', ' ' AS 'MaterialManage', ' ' AS 'JobStatus', CONCAT(A.JOB,CONCAT('-',rtrim(A.SUFFIX))) AS 'WOLabel', C.SALES_ORDER, C.SALES_ORDER_LINE, CONCAT(C.SALES_ORDER,C.SALES_ORDER_LINE) AS 'SALESORDERLINE', RTRIM(C.PART) AS 'Part', C.PART_DESCRIPTION, ' ' AS 'CodeSort', A.SEQ, rtrim(IF(INV_LXR.DISPLAY_PART is null, SUBSTRING(A.PART, 1, 20), INV_LXR.DISPLAY_PART)) AS 'DISPLAY_MAT', RTRIM(A.PART) as 'MatPart',  IFNULL(D.PRODUCT_LINE,'') AS 'PL', IFNULL(D.code_sort,'') AS 'InvCodeSort', A.DESCRIPTION AS DESCR, IF(F.CODE_SOURCE='P','PS',IF(F.CODE_SOURCE='J','PJ','PJ')) AS 'CODE_SOURCE', A.BURDEN, B.PCSTOPROD, IF(D.QTY_ONHAND IS NULL,'0.0000',D.QTY_ONHAND) AS QTY_ONHAND, B.PCSCOMPL,  (B.PCSTOPROD - B.PCSCOMPL) AS PCSREMAIN, IFNULL(RTRIM(E.VENDOR),(SELECT RTRIM(NAME_VENDOR) FROM V_INVENTORY_ALL Y WHERE D.PART=Y.PART and D.LOCATION = Y.LOCATION)) AS 'VENDOR',IFNULL(E.VENDOR,A.OPERATION) AS 'OutsideVENDOR', 'BROWSE' AS 'VendorSearch',  '' AS 'VendorName', IF(A.LEAD_TIME=0,0,A.LEAD_TIME/40) AS 'LEAD_TIME', '' as 'PartFriendly', E.PURCHASE_ORDER,LEFT(E.RECORD_NO,3) AS LINE,If(IsNull(G.TEXT,'') <> '',G.TEXT,W.Text) as Text, CONCAT(PURCHASE_ORDER,LEFT(E.RECORD_NO,3)) AS 'POANDLINE', IF(E.DATE_DUE_LINE = '1900-1-1',NULL,E.DATE_DUE_LINE) AS DATE_DUE_LINE, A.DATE_DUE AS 'LINEDUE', D.AMT_COST, D.AMT_ALT_COST, IF(RTRIM(D.UM_PURCHASING)='',D.UM_INVENTORY,D.UM_PURCHASING) AS 'PURUM', IFNULL(E.COST,(SELECT IF(AMT_ALT_COST=0,AMT_COST,AMT_ALT_COST) FROM V_INVENTORY_MSTR Z WHERE Z.PART=D.PART AND Z.LOCATION=D.LOCATION)) AS 'COST', IFNULL(E.Extension, (SELECT IF(AMT_ALT_COST=0,AMT_COST,AMT_ALT_COST)*B.PCSTOPROD FROM V_INVENTORY_MSTR Z WHERE Z.PART=D.PART AND Z.LOCATION=D.LOCATION)) AS 'EXTENSION',' ' as 'JobSteps', CONCAT(A.JOB,A.SUFFIX) AS 'JS', CONCAT(CONCAT(A.JOB,A.SUFFIX),A.SEQ) AS JSS, A.JOB, A.SUFFIX, C.LOCATION FROM V_JOB_OPERATIONS A WITH (INDEX (JOBOP565701))LEFT JOIN V_JOB_HEADER C ON A.JOB = C.JOB AND A.SUFFIX = C.SUFFIX LEFT JOIN INVENTORY_MSTR D ON A.PART = D.PART AND C.LOCATION = D.LOCATION LEFT JOIN INV_LXR ON A.PART = INV_LXR.GSS_PART LEFT JOIN INVENTORY_MST2 F ON A.PART = F.PART AND C.LOCATION = F.LOCATION LEFT JOIN APSV3_JBLINES B ON JSS = B.JSS  LEFT JOIN V_PO_LINES E ON A.JOB = E.JOB AND A.SUFFIX = E.SUFFIX AND A.SEQ = E.SEQUENCE LEFT JOIN PO_LN_TEXT G ON E.PURCHASE_ORDER = G.PO_NUM AND E.RECORD_NO = G.LINE left join WO_Seq_Comments w on A.Job = w.WO and  A.Suffix = w.WO_Suffix and A.seq = w.WO_Seq WHERE A.FLAG_CLOSED <> 'Y'  AND A.LMO in ('M','O') AND (A.SEQ NOT IN ('995000','998000') AND LEFT(A.SEQ,1)<>'9' ) AND LEFT(A.JOB,1)<>  'Z'  AND  C.DATE_CLOSED='1900-01-01'  AND PL<>'53' ORDER BY A.SEQ;")		
		V.Local.sSql4.Set("SELECT DISTINCT CAST(0 AS BIT) AS 'SelectWO',' ' AS 'DISPLAY_PART', ' ' as 'PrtDocCntrl',  C.DATE_DUE, ' ' AS 'CUR_OPER', ' ' AS 'MaterialIssue', ' ' AS 'MaterialManage', ' ' AS 'JobStatus', CONCAT(A.JOB,CONCAT('-',rtrim(A.SUFFIX))) AS 'WOLabel', C.SALES_ORDER, C.SALES_ORDER_LINE, CONCAT(C.SALES_ORDER,C.SALES_ORDER_LINE) AS 'SALESORDERLINE', RTRIM(C.PART) AS 'Part', C.PART_DESCRIPTION, ' ' AS 'CodeSort', A.SEQ, rtrim(IF(INV_LXR.DISPLAY_PART is null, SUBSTRING(A.PART, 1, 20), INV_LXR.DISPLAY_PART)) AS 'DISPLAY_MAT', RTRIM(A.PART) as 'MatPart',  IFNULL(D.PRODUCT_LINE,C.PRODUCT_LINE) AS 'PL', A.DESCRIPTION AS DESCR, IF(F.CODE_SOURCE='P','PS',IF(F.CODE_SOURCE='J','PJ','PJ')) AS 'CODE_SOURCE', A.BURDEN, B.PCSTOPROD, IF(D.QTY_ONHAND IS NULL,'0.0000',D.QTY_ONHAND) AS QTY_ONHAND, B.PCSCOMPL,  (B.PCSTOPROD - B.PCSCOMPL) AS PCSREMAIN, IFNULL(E.VENDOR,A.OPERATION) AS 'VENDOR', 'BROWSE' AS 'VendorSearch',  '' AS 'VendorName', IF(A.LEAD_TIME=0,0,A.LEAD_TIME/40) AS 'LEAD_TIME', '' as 'PartFriendly', E.PURCHASE_ORDER,LEFT(E.RECORD_NO,3) AS LINE,G.TEXT,  CONCAT(PURCHASE_ORDER,LEFT(E.RECORD_NO,3)) AS 'POANDLINE', IF(E.DATE_DUE_LINE = '1900-1-1',NULL,E.DATE_DUE_LINE) AS DATE_DUE_LINE, A.DATE_DUE AS 'LINEDUE', D.AMT_COST, D.AMT_ALT_COST, IF(RTRIM(D.UM_PURCHASING)='',D.UM_INVENTORY,D.UM_PURCHASING) AS 'PURUM', IFNULL(E.COST,(SELECT IF(AMT_ALT_COST=0,AMT_COST,AMT_ALT_COST) FROM V_INVENTORY_MSTR Z WHERE Z.PART=D.PART)) AS 'COST', IFNULL(E.Extension, (SELECT IF(AMT_ALT_COST=0,AMT_COST,AMT_ALT_COST)*B.PCSTOPROD FROM V_INVENTORY_MSTR Z WHERE Z.PART=D.PART)) AS 'EXTENSION',' ' as 'JobSteps', CONCAT(A.JOB,A.SUFFIX) AS 'JS', CONCAT(CONCAT(A.JOB,A.SUFFIX),A.SEQ) AS JSS, A.JOB, A.SUFFIX, C.LOCATION FROM V_JOB_OPERATIONS A LEFT JOIN INV_LXR ON A.PART = INV_LXR.GSS_PART LEFT JOIN APSV3_JBLINES B ON JSS = B.JSS  LEFT JOIN V_JOB_HEADER C ON A.JOB = C.JOB AND A.SUFFIX = C.SUFFIX LEFT JOIN INVENTORY_MSTR D ON A.PART = D.PART AND C.LOCATION = D.LOCATION LEFT JOIN INVENTORY_MST2 F ON A.PART = F.PART AND C.LOCATION = F.LOCATION LEFT JOIN V_PO_LINES E ON A.JOB = E.JOB AND A.SUFFIX = E.SUFFIX AND A.SEQ = E.SEQUENCE LEFT JOIN PO_LN_TEXT G ON E.PURCHASE_ORDER = G.PO_NUM AND E.RECORD_NO = G.LINE WHERE A.LMO = 'O' AND A.SEQ NOT IN ('995000','998000') AND C.DATE_CLOSED='1900-01-01' AND LEFT(A.JOB,1)<>'Z' AND FLAG_CLOSED <> 'Y' AND PL<>'53' AND LEFT(A.SEQ,1)<>'9' ORDER BY A.SEQ")
	f.Intrinsic.Control.elseIf(v.Args.SalesOrder.Trim,=,"")
		f.Intrinsic.String.Build("SELECT CAST(0 AS BIT) AS 'SelectWO', ' ' AS 'DISPLAY_PART', CAST(CASE WHEN FLAG_WO_PRTD = 'Y' OR FLAG_WO_PRTD = 'R' THEN 1 ELSE 0 END AS BIT) AS PRINTED, CAST(CASE WHEN FLAG_WO_RELEASED = 'Y' THEN 1 ELSE 0 END AS BIT) AS RELEASED, CASE WHEN VJH.FLAG_HOLD = 'Y' THEN CONVERT(1,SQL_BIT) WHEN VJH.FLAG_HOLD = 'N' THEN CONVERT(0,SQL_BIT) ELSE CONVERT(0,SQL_BIT) END AS FLAG_HOLD, ' ' as 'PrtDocCntrl', CONCAT(VJH.JOB,CONCAT('-',VJH.SUFFIX)) AS 'WOLabel',  ' ' AS 'MaterialIssue', ' ' AS 'JobStatus', VCM.NAME_CUSTOMER AS NAME_CUSTOMER,  ' ' AS 'CodeSort', if(VJH.SALES_ORDER='0000000','',VJH.SALES_ORDER) AS 'SALES_ORDER', if(VJH.SALES_ORDER_LINE='000','',VJH.SALES_ORDER_LINE) AS 'SALES_ORDER_LINE',  CONCAT(VJH.SALES_ORDER,concat(VJH.SALES_ORDER_LINE,0)) AS 'SALESORDERLINE',  CUSTOMER_PO, VJH.PROJECT, VJH.SALESPERSON, ' ' As DISPLAY_PART, '' AS 'PartFriendly', VJH.PART_DESCRIPTION AS DESCRIPTION, QTY_ORDER, QTY_ORDER - QTY_COMPLETED AS PCS_REM1, DATE_DUE, DATE_DUE-1 AS 'DATE_DUE_NEW', CONVERT('1900-01-01',SQL_DATE) AS 'DATE_DUE_FLOAT', CONVERT('1900-01-01',SQL_DATE) AS 'DATE_DUE_NO_FLOAT', SCHEDULED_DUE_DATE, DATE_ORIG_DUE, CONVERT(0,SQL_FLOAT) AS 'DAYS_LATE', CONVERT(0,SQL_FLOAT) as 'DAYS_LATE_NO_FLOAT',  CONVERT(0.00,SQL_FLOAT) AS EST_HRS,NUM_HOURS AS ACT_HRS,CONVERT(0.00,SQL_FLOAT) AS REM_HRS,CONVERT(0.00,SQL_FLOAT) AS TOT_HRS_REM,' ' AS DEPT, CONVERT(NULL,SQL_DATE) AS CUR_OPER_DATE, ' ' as 'JobSteps', ' ' AS CUR_OPER, ' ' AS NEXT_OPER, ' ' AS OUTSIDE, CONVERT(NULL,SQL_DATE) AS SHIP_TO_OP, GWN.NOTES AS 'WO_NOTE', RTRIM(VWUF.USER_1) AS 'User1', RTRIM(VWUF.USER_6) AS 'WO_NOTE2', (VJH.AMT_PRICE_PER_UNIT * QTY_ORDER) AS 'PRICE_EXT', VJH.AMT_MATERIAL, VJH.AMT_LABOR, VJH.AMT_OVERHEAD, VJH.OUTS, VJH.FREIGHT, VJH.OTHER, (VJH.AMT_MATERIAL + VJH.AMT_LABOR + VJH.AMT_OVERHEAD + VJH.OUTS + VJH.FREIGHT + VJH.OTHER) AS 'TOTALCOST', '' AS 'CodeSort2', PRIORITY,  RTRIM(COALESCE(VJH.PART,'')) AS PART,VJH.LOCATION,VJH.PRODUCT_LINE, DATE_OPENED,(SELECT TOP 1 VJO.DATE_START FROM V_JOB_OPERATIONS VJO WHERE VJO.LMO = 'L' AND VJO.JOB = VJH.JOB AND VJO.SUFFIX = VJH.SUFFIX AND VJO.SEQ < '990000') AS DATE_START, CONCAT(VJH.JOB,VJH.SUFFIX) AS JS,CONVERT(0,SQL_BIT) AS IND_FLAG,CONVERT(0,SQL_BIT) AS LATE,'' AS PCS_REM, '' as 'SOUSER_3', '' as 'SOUSER_4', '' as 'SOUSER_5', '' as 'SONotes', '' AS 'RowChange', CONVERT('1900-01-01',SQL_DATE) as 'SODate', ' ' as 'SOTerms', VJH.PHASE, VJH.JOB, VJH.SUFFIX, VJH.AMT_PRICE_PER_UNIT FROM V_JOB_HEADER VJH LEFT JOIN V_CUSTOMER_MASTER VCM ON VJH.CUSTOMER=VCM.CUSTOMER  LEFT JOIN V_WO_USER_FLDS VWUF ON VJH.JOB = VWUF.JOB AND VJH.SUFFIX = VWUF.SUFFIX LEFT JOIN GAB_4169_WO_NOTES GWN ON VJH.JOB = GWN.JOB AND VJH.SUFFIX = GWN.SUFFIX LEFT JOIN V_ORDER_TO_WO OWO ON VJH.JOB = OWO.JOB AND VJH.SUFFIX = OWO.SUFFIX LEFT JOIN V_ORDER_LINES VOL ON OWO.ORDER_NO = VOL.ORDER_NO AND OWO.ORDER_LINE = VOL.RECORD_NO LEFT JOIN V_ORDER_BILL_TO VOB ON VOL.ORDER_NO = VOB.ORDER_NO WHERE DATE_CLOSED = '1900-1-1' AND LEFT(VJH.JOB,1)<>'Z' AND VJH.CUSTOMER='{0}' ORDER BY WOLabel, DATE_DUE;",v.Args.Customer,v.Local.ssql)
		F.Intrinsic.String.Build("SELECT CAST(0 AS BIT) AS 'SelectWO',' ' AS 'DISPLAY_PART',CAST(CASE WHEN FLAG_WO_PRTD = 'Y' OR FLAG_WO_PRTD = 'R' THEN 1 ELSE 0 END AS BIT) AS PRINTED, CAST(CASE WHEN FLAG_WO_RELEASED = 'Y' THEN 1 ELSE 0 END AS BIT) AS RELEASED, CASE WHEN VJH.FLAG_HOLD = 'Y' THEN CONVERT(1,SQL_BIT) WHEN VJH.FLAG_HOLD = 'N' THEN CONVERT(0,SQL_BIT) ELSE CONVERT(0,SQL_BIT) END AS FLAG_HOLD, ' ' as 'PrtDocCntrl', ' ' AS 'MaterialIssue', CONCAT(VJH.JOB,CONCAT('-',VJH.SUFFIX)) AS 'WOLabel', APS.SEQ, RTRIM(APS.SEQRES) AS 'SEQRES', APS.StartDate, APS.DueDate, if(VJH.SALES_ORDER='0000000','',VJH.SALES_ORDER) AS 'SALES_ORDER', if(VJH.SALES_ORDER_LINE='000','',VJH.SALES_ORDER_LINE) AS 'SALES_ORDER_LINE',   CONCAT(VJH.SALES_ORDER,concat(VJH.SALES_ORDER_LINE,0)) AS 'SALESORDERLINE', ' ' AS 'JobStatus', VCM.NAME_CUSTOMER AS NAME_CUSTOMER,  ' ' AS 'CodeSort', ' ' As DISPLAY_PART, VJH.PART_DESCRIPTION AS DESCRIPTION, QTY_ORDER, DATE_DUE, ' ' AS CUR_OPER, (InitSU+HoursOrig) AS EST_HRS, HoursAppl AS ACT_HRS, (InitSU+HoursOrig) - HoursAppl AS REM_HRS, ' ' AS NEXT_OPER, ' ' AS OUTSIDE, CONVERT(0,SQL_FLOAT) AS 'DAYS_LATE', ' ' as 'JobSteps', CUSTOMER_PO, VJH.PROJECT, VJH.SALESPERSON, '' AS 'PartFriendly', QTY_ORDER - QTY_COMPLETED AS PCS_REM1, CONVERT('1900-01-01',SQL_DATE) AS 'DATE_DUE_FLOAT', CONVERT('1900-01-01',SQL_DATE) AS 'DATE_DUE_NO_FLOAT', SCHEDULED_DUE_DATE, DATE_ORIG_DUE, CONVERT(0,SQL_FLOAT) as 'DAYS_LATE_NO_FLOAT', CONVERT(0.00,SQL_FLOAT) AS TOT_HRS_REM,' ' AS DEPT, CONVERT(NULL,SQL_DATE) AS CUR_OPER_DATE,   CONVERT(NULL,SQL_DATE) AS SHIP_TO_OP, GWN.NOTES AS 'WO_NOTE',RTRIM(VWUF.USER_1) AS 'User1', RTRIM(VWUF.USER_6) AS 'WO_NOTE2', (VJH.AMT_PRICE_PER_UNIT * QTY_ORDER) AS 'PRICE_EXT', VJH.AMT_MATERIAL, VJH.AMT_LABOR, VJH.AMT_OVERHEAD, VJH.OUTS, VJH.FREIGHT, VJH.OTHER, (VJH.AMT_MATERIAL + VJH.AMT_LABOR + VJH.AMT_OVERHEAD + VJH.OUTS + VJH.FREIGHT + VJH.OTHER) AS 'TOTALCOST', '' AS 'CodeSort2', PRIORITY,  RTRIM(COALESCE(VJH.PART,'')) AS PART,VJH.LOCATION,VJH.PRODUCT_LINE, DATE_OPENED,(SELECT TOP 1 VJO.DATE_START FROM V_JOB_OPERATIONS VJO WHERE VJO.LMO = 'L' AND VJO.JOB = VJH.JOB AND VJO.SUFFIX = VJH.SUFFIX AND VJO.SEQ < '990000') AS DATE_START, CONCAT(VJH.JOB,VJH.SUFFIX) AS JS,CONVERT(0,SQL_BIT) AS IND_FLAG,CONVERT(0,SQL_BIT) AS LATE,'' AS PCS_REM,  '' as 'SOUSER_3', '' as 'SOUSER_4', '' as 'SOUSER_5', '' as 'SONotes', '' AS 'RowChange', CONVERT('1900-01-01',SQL_DATE) as 'SODate', ' ' as 'SOTerms', VJH.PHASE, VJH.JOB, VJH.SUFFIX, VJH.AMT_PRICE_PER_UNIT, APS.JSS FROM V_JOB_HEADER VJH LEFT JOIN V_CUSTOMER_MASTER VCM ON VJH.CUSTOMER=VCM.CUSTOMER  LEFT JOIN V_WO_USER_FLDS VWUF ON VJH.JOB = VWUF.JOB AND VJH.SUFFIX = VWUF.SUFFIX LEFT JOIN GAB_4169_WO_NOTES GWN ON VJH.JOB = GWN.JOB AND VJH.SUFFIX = GWN.SUFFIX LEFT JOIN V_ORDER_TO_WO OWO ON VJH.JOB = OWO.JOB AND VJH.SUFFIX = OWO.SUFFIX LEFT JOIN V_ORDER_LINES VOL ON OWO.ORDER_NO = VOL.ORDER_NO AND OWO.ORDER_LINE = VOL.RECORD_NO LEFT JOIN V_ORDER_BILL_TO VOB ON VOL.ORDER_NO = VOB.ORDER_NO LEFT JOIN APSV3_JBLines APS ON VJH.JOB = APS.JOB AND VJH.SUFFIX = APS.SFX AND APS.SEQTYPE = 1 AND IFNULL(APS.COMPLDATE,'1900-01-01')='1900-01-01' WHERE DATE_CLOSED = '1900-1-1' AND LEFT(VJH.JOB,1)<>'Z' AND VJH.Customer='{0}' ORDER BY WOLabel, SEQ, DATE_DUE",v.Args.Customer,v.Local.ssql2)
		F.Intrinsic.String.Build("SELECT DISTINCT A.LMO,CAST(0 AS BIT) AS 'SelectWO',' ' AS 'DISPLAY_PART', ' ' as 'PrtDocCntrl',  C.DATE_DUE, ' ' AS 'CUR_OPER', ' ' AS 'MaterialIssue', ' ' AS 'MaterialManage', ' ' AS 'JobStatus', CONCAT(A.JOB,CONCAT('-',rtrim(A.SUFFIX))) AS 'WOLabel', C.SALES_ORDER, C.SALES_ORDER_LINE, CONCAT(C.SALES_ORDER,C.SALES_ORDER_LINE) AS 'SALESORDERLINE', RTRIM(C.PART) AS 'Part', C.PART_DESCRIPTION, ' ' AS 'CodeSort', A.SEQ, rtrim(IF(INV_LXR.DISPLAY_PART is null, SUBSTRING(A.PART, 1, 20), INV_LXR.DISPLAY_PART)) AS 'DISPLAY_MAT', RTRIM(A.PART) as 'MatPart',  IFNULL(D.PRODUCT_LINE,'') AS 'PL', IFNULL(D.code_sort,'') AS 'InvCodeSort', A.DESCRIPTION AS DESCR, IF(F.CODE_SOURCE='P','PS',IF(F.CODE_SOURCE='J','PJ','PJ')) AS 'CODE_SOURCE', A.BURDEN, B.PCSTOPROD, IF(D.QTY_ONHAND IS NULL,'0.0000',D.QTY_ONHAND) AS QTY_ONHAND, B.PCSCOMPL,  (B.PCSTOPROD - B.PCSCOMPL) AS PCSREMAIN, IFNULL(RTRIM(E.VENDOR),(SELECT RTRIM(NAME_VENDOR) FROM V_INVENTORY_ALL Y WHERE D.PART=Y.PART and D.LOCATION = Y.LOCATION)) AS 'VENDOR',IFNULL(E.VENDOR,A.OPERATION) AS 'OutsideVENDOR', 'BROWSE' AS 'VendorSearch',  '' AS 'VendorName', IF(A.LEAD_TIME=0,0,A.LEAD_TIME/40) AS 'LEAD_TIME', '' as 'PartFriendly', E.PURCHASE_ORDER,LEFT(E.RECORD_NO,3) AS LINE,If(IsNull(G.TEXT,'') <> '',G.TEXT,W.Text) as Text, CONCAT(PURCHASE_ORDER,LEFT(E.RECORD_NO,3)) AS 'POANDLINE', IF(E.DATE_DUE_LINE = '1900-1-1',NULL,E.DATE_DUE_LINE) AS DATE_DUE_LINE, A.DATE_DUE AS 'LINEDUE', D.AMT_COST, D.AMT_ALT_COST, IF(RTRIM(D.UM_PURCHASING)='',D.UM_INVENTORY,D.UM_PURCHASING) AS 'PURUM', IFNULL(E.COST,(SELECT IF(AMT_ALT_COST=0,AMT_COST,AMT_ALT_COST) FROM V_INVENTORY_MSTR Z WHERE Z.PART=D.PART AND Z.LOCATION=D.LOCATION)) AS 'COST', IFNULL(E.Extension, (SELECT IF(AMT_ALT_COST=0,AMT_COST,AMT_ALT_COST)*B.PCSTOPROD FROM V_INVENTORY_MSTR Z WHERE Z.PART=D.PART AND Z.LOCATION=D.LOCATION)) AS 'EXTENSION',' ' as 'JobSteps', CONCAT(A.JOB,A.SUFFIX) AS 'JS', CONCAT(CONCAT(A.JOB,A.SUFFIX),A.SEQ) AS JSS, A.JOB, A.SUFFIX, C.LOCATION FROM V_JOB_OPERATIONS A WITH (INDEX (JOBOP565701))LEFT JOIN V_JOB_HEADER C ON A.JOB = C.JOB AND A.SUFFIX = C.SUFFIX LEFT JOIN INVENTORY_MSTR D ON A.PART = D.PART AND C.LOCATION = D.LOCATION LEFT JOIN INV_LXR ON A.PART = INV_LXR.GSS_PART LEFT JOIN INVENTORY_MST2 F ON A.PART = F.PART AND C.LOCATION = F.LOCATION LEFT JOIN APSV3_JBLINES B ON JSS = B.JSS  LEFT JOIN V_PO_LINES E ON A.JOB = E.JOB AND A.SUFFIX = E.SUFFIX AND A.SEQ = E.SEQUENCE LEFT JOIN PO_LN_TEXT G ON E.PURCHASE_ORDER = G.PO_NUM AND E.RECORD_NO = G.LINE left join WO_Seq_Comments w on A.Job = w.WO and  A.Suffix = w.WO_Suffix and A.seq = w.WO_Seq WHERE A.FLAG_CLOSED <> 'Y'  AND A.LMO in ('M','O') AND (A.SEQ NOT IN ('995000','998000') AND LEFT(A.SEQ,1)<>'9' ) AND LEFT(A.JOB,1)<>  'Z'  AND  C.DATE_CLOSED='1900-01-01'  AND PL<>'53' AND C.CUSTOMER='{0}' ORDER BY A.SEQ;",v.Args.Customer,v.Local.ssql3)
		F.Intrinsic.String.Build("SELECT DISTINCT CAST(0 AS BIT) AS 'SelectWO',' ' AS 'DISPLAY_PART', ' ' as 'PrtDocCntrl',  C.DATE_DUE, ' ' AS 'CUR_OPER', ' ' AS 'MaterialIssue', ' ' AS 'MaterialManage', ' ' AS 'JobStatus', CONCAT(A.JOB,CONCAT('-',rtrim(A.SUFFIX))) AS 'WOLabel', C.SALES_ORDER, C.SALES_ORDER_LINE, CONCAT(C.SALES_ORDER,C.SALES_ORDER_LINE) AS 'SALESORDERLINE', RTRIM(C.PART) AS 'Part', C.PART_DESCRIPTION, ' ' AS 'CodeSort', A.SEQ, rtrim(IF(INV_LXR.DISPLAY_PART is null, SUBSTRING(A.PART, 1, 20), INV_LXR.DISPLAY_PART)) AS 'DISPLAY_MAT', RTRIM(A.PART) as 'MatPart',  IFNULL(D.PRODUCT_LINE,C.PRODUCT_LINE) AS 'PL', A.DESCRIPTION AS DESCR, IF(F.CODE_SOURCE='P','PS',IF(F.CODE_SOURCE='J','PJ','PJ')) AS 'CODE_SOURCE', A.BURDEN, B.PCSTOPROD, IF(D.QTY_ONHAND IS NULL,'0.0000',D.QTY_ONHAND) AS QTY_ONHAND, B.PCSCOMPL,  (B.PCSTOPROD - B.PCSCOMPL) AS PCSREMAIN, IFNULL(E.VENDOR,A.OPERATION) AS 'VENDOR', 'BROWSE' AS 'VendorSearch',  '' AS 'VendorName', IF(A.LEAD_TIME=0,0,A.LEAD_TIME/40) AS 'LEAD_TIME', '' as 'PartFriendly', E.PURCHASE_ORDER,LEFT(E.RECORD_NO,3) AS LINE,G.TEXT,  CONCAT(PURCHASE_ORDER,LEFT(E.RECORD_NO,3)) AS 'POANDLINE', IF(E.DATE_DUE_LINE = '1900-1-1',NULL,E.DATE_DUE_LINE) AS DATE_DUE_LINE, A.DATE_DUE AS 'LINEDUE', D.AMT_COST, D.AMT_ALT_COST, IF(RTRIM(D.UM_PURCHASING)='',D.UM_INVENTORY,D.UM_PURCHASING) AS 'PURUM', IFNULL(E.COST,(SELECT IF(AMT_ALT_COST=0,AMT_COST,AMT_ALT_COST) FROM V_INVENTORY_MSTR Z WHERE Z.PART=D.PART)) AS 'COST', IFNULL(E.Extension, (SELECT IF(AMT_ALT_COST=0,AMT_COST,AMT_ALT_COST)*B.PCSTOPROD FROM V_INVENTORY_MSTR Z WHERE Z.PART=D.PART)) AS 'EXTENSION',' ' as 'JobSteps', CONCAT(A.JOB,A.SUFFIX) AS 'JS', CONCAT(CONCAT(A.JOB,A.SUFFIX),A.SEQ) AS JSS, A.JOB, A.SUFFIX, C.LOCATION FROM V_JOB_OPERATIONS A LEFT JOIN INV_LXR ON A.PART = INV_LXR.GSS_PART LEFT JOIN APSV3_JBLINES B ON JSS = B.JSS  LEFT JOIN V_JOB_HEADER C ON A.JOB = C.JOB AND A.SUFFIX = C.SUFFIX LEFT JOIN INVENTORY_MSTR D ON A.PART = D.PART AND C.LOCATION = D.LOCATION LEFT JOIN INVENTORY_MST2 F ON A.PART = F.PART AND C.LOCATION = F.LOCATION LEFT JOIN V_PO_LINES E ON A.JOB = E.JOB AND A.SUFFIX = E.SUFFIX AND A.SEQ = E.SEQUENCE LEFT JOIN PO_LN_TEXT G ON E.PURCHASE_ORDER = G.PO_NUM AND E.RECORD_NO = G.LINE WHERE A.LMO = 'O' AND A.SEQ NOT IN ('995000','998000') AND C.DATE_CLOSED='1900-01-01' AND LEFT(A.JOB,1)<>'Z' AND FLAG_CLOSED <> 'Y' AND PL<>'53' AND LEFT(A.SEQ,1)<>'9' AND VJH.CUSTOMER='{0}' ORDER BY A.SEQ",v.Args.Customer,v.Local.ssql4)
	f.Intrinsic.Control.Else
		f.Intrinsic.String.Build("SELECT CAST(0 AS BIT) AS 'SelectWO', ' ' AS 'DISPLAY_PART', CAST(CASE WHEN FLAG_WO_PRTD = 'Y' OR FLAG_WO_PRTD = 'R' THEN 1 ELSE 0 END AS BIT) AS PRINTED, CAST(CASE WHEN FLAG_WO_RELEASED = 'Y' THEN 1 ELSE 0 END AS BIT) AS RELEASED, CASE WHEN VJH.FLAG_HOLD = 'Y' THEN CONVERT(1,SQL_BIT) WHEN VJH.FLAG_HOLD = 'N' THEN CONVERT(0,SQL_BIT) ELSE CONVERT(0,SQL_BIT) END AS FLAG_HOLD, ' ' as 'PrtDocCntrl', CONCAT(VJH.JOB,CONCAT('-',VJH.SUFFIX)) AS 'WOLabel',  ' ' AS 'MaterialIssue', ' ' AS 'JobStatus', VCM.NAME_CUSTOMER AS NAME_CUSTOMER,  ' ' AS 'CodeSort', if(VJH.SALES_ORDER='0000000','',VJH.SALES_ORDER) AS 'SALES_ORDER', if(VJH.SALES_ORDER_LINE='000','',VJH.SALES_ORDER_LINE) AS 'SALES_ORDER_LINE',  CONCAT(VJH.SALES_ORDER,concat(VJH.SALES_ORDER_LINE,0)) AS 'SALESORDERLINE',  CUSTOMER_PO, VJH.PROJECT, VJH.SALESPERSON, ' ' As DISPLAY_PART, '' AS 'PartFriendly', VJH.PART_DESCRIPTION AS DESCRIPTION, QTY_ORDER, QTY_ORDER - QTY_COMPLETED AS PCS_REM1, DATE_DUE, DATE_DUE-1 AS 'DATE_DUE_NEW', CONVERT('1900-01-01',SQL_DATE) AS 'DATE_DUE_FLOAT', CONVERT('1900-01-01',SQL_DATE) AS 'DATE_DUE_NO_FLOAT', SCHEDULED_DUE_DATE, DATE_ORIG_DUE, CONVERT(0,SQL_FLOAT) AS 'DAYS_LATE', CONVERT(0,SQL_FLOAT) as 'DAYS_LATE_NO_FLOAT',  CONVERT(0.00,SQL_FLOAT) AS EST_HRS,NUM_HOURS AS ACT_HRS,CONVERT(0.00,SQL_FLOAT) AS REM_HRS,CONVERT(0.00,SQL_FLOAT) AS TOT_HRS_REM,' ' AS DEPT, CONVERT(NULL,SQL_DATE) AS CUR_OPER_DATE, ' ' as 'JobSteps', ' ' AS CUR_OPER, ' ' AS NEXT_OPER, ' ' AS OUTSIDE, CONVERT(NULL,SQL_DATE) AS SHIP_TO_OP, GWN.NOTES AS 'WO_NOTE', RTRIM(VWUF.USER_1) AS 'User1', RTRIM(VWUF.USER_6) AS 'WO_NOTE2', (VJH.AMT_PRICE_PER_UNIT * QTY_ORDER) AS 'PRICE_EXT', VJH.AMT_MATERIAL, VJH.AMT_LABOR, VJH.AMT_OVERHEAD, VJH.OUTS, VJH.FREIGHT, VJH.OTHER, (VJH.AMT_MATERIAL + VJH.AMT_LABOR + VJH.AMT_OVERHEAD + VJH.OUTS + VJH.FREIGHT + VJH.OTHER) AS 'TOTALCOST', '' AS 'CodeSort2', PRIORITY,  RTRIM(COALESCE(VJH.PART,'')) AS PART,VJH.LOCATION,VJH.PRODUCT_LINE, DATE_OPENED,(SELECT TOP 1 VJO.DATE_START FROM V_JOB_OPERATIONS VJO WHERE VJO.LMO = 'L' AND VJO.JOB = VJH.JOB AND VJO.SUFFIX = VJH.SUFFIX AND VJO.SEQ < '990000') AS DATE_START, CONCAT(VJH.JOB,VJH.SUFFIX) AS JS,CONVERT(0,SQL_BIT) AS IND_FLAG,CONVERT(0,SQL_BIT) AS LATE,'' AS PCS_REM, '' as 'SOUSER_3', '' as 'SOUSER_4', '' as 'SOUSER_5', '' as 'SONotes', '' AS 'RowChange', CONVERT('1900-01-01',SQL_DATE) as 'SODate', ' ' as 'SOTerms', VJH.PHASE, VJH.JOB, VJH.SUFFIX, VJH.AMT_PRICE_PER_UNIT FROM V_JOB_HEADER VJH LEFT JOIN V_CUSTOMER_MASTER VCM ON VJH.CUSTOMER=VCM.CUSTOMER  LEFT JOIN V_WO_USER_FLDS VWUF ON VJH.JOB = VWUF.JOB AND VJH.SUFFIX = VWUF.SUFFIX LEFT JOIN GAB_4169_WO_NOTES GWN ON VJH.JOB = GWN.JOB AND VJH.SUFFIX = GWN.SUFFIX LEFT JOIN V_ORDER_TO_WO OWO ON VJH.JOB = OWO.JOB AND VJH.SUFFIX = OWO.SUFFIX LEFT JOIN V_ORDER_LINES VOL ON OWO.ORDER_NO = VOL.ORDER_NO AND OWO.ORDER_LINE = VOL.RECORD_NO LEFT JOIN V_ORDER_BILL_TO VOB ON VOL.ORDER_NO = VOB.ORDER_NO WHERE DATE_CLOSED = '1900-1-1' AND LEFT(VJH.JOB,1)<>'Z' AND VJH.CUSTOMER='{0}' AND VJH.SALES_ORDER='{1}' ORDER BY WOLabel, DATE_DUE;",v.Args.Customer,V.Args.SalesOrder,v.Local.ssql)
		F.Intrinsic.String.Build("SELECT CAST(0 AS BIT) AS 'SelectWO',' ' AS 'DISPLAY_PART',CAST(CASE WHEN FLAG_WO_PRTD = 'Y' OR FLAG_WO_PRTD = 'R' THEN 1 ELSE 0 END AS BIT) AS PRINTED, CAST(CASE WHEN FLAG_WO_RELEASED = 'Y' THEN 1 ELSE 0 END AS BIT) AS RELEASED, CASE WHEN VJH.FLAG_HOLD = 'Y' THEN CONVERT(1,SQL_BIT) WHEN VJH.FLAG_HOLD = 'N' THEN CONVERT(0,SQL_BIT) ELSE CONVERT(0,SQL_BIT) END AS FLAG_HOLD, ' ' as 'PrtDocCntrl', ' ' AS 'MaterialIssue', CONCAT(VJH.JOB,CONCAT('-',VJH.SUFFIX)) AS 'WOLabel', APS.SEQ, RTRIM(APS.SEQRES) AS 'SEQRES', APS.StartDate, APS.DueDate, if(VJH.SALES_ORDER='0000000','',VJH.SALES_ORDER) AS 'SALES_ORDER', if(VJH.SALES_ORDER_LINE='000','',VJH.SALES_ORDER_LINE) AS 'SALES_ORDER_LINE',   CONCAT(VJH.SALES_ORDER,concat(VJH.SALES_ORDER_LINE,0)) AS 'SALESORDERLINE', ' ' AS 'JobStatus', VCM.NAME_CUSTOMER AS NAME_CUSTOMER,  ' ' AS 'CodeSort', ' ' As DISPLAY_PART, VJH.PART_DESCRIPTION AS DESCRIPTION, QTY_ORDER, DATE_DUE, ' ' AS CUR_OPER, (InitSU+HoursOrig) AS EST_HRS, HoursAppl AS ACT_HRS, (InitSU+HoursOrig) - HoursAppl AS REM_HRS, ' ' AS NEXT_OPER, ' ' AS OUTSIDE, CONVERT(0,SQL_FLOAT) AS 'DAYS_LATE', ' ' as 'JobSteps', CUSTOMER_PO, VJH.PROJECT, VJH.SALESPERSON, '' AS 'PartFriendly', QTY_ORDER - QTY_COMPLETED AS PCS_REM1, CONVERT('1900-01-01',SQL_DATE) AS 'DATE_DUE_FLOAT', CONVERT('1900-01-01',SQL_DATE) AS 'DATE_DUE_NO_FLOAT', SCHEDULED_DUE_DATE, DATE_ORIG_DUE, CONVERT(0,SQL_FLOAT) as 'DAYS_LATE_NO_FLOAT', CONVERT(0.00,SQL_FLOAT) AS TOT_HRS_REM,' ' AS DEPT, CONVERT(NULL,SQL_DATE) AS CUR_OPER_DATE,   CONVERT(NULL,SQL_DATE) AS SHIP_TO_OP, GWN.NOTES AS 'WO_NOTE',RTRIM(VWUF.USER_1) AS 'User1', RTRIM(VWUF.USER_6) AS 'WO_NOTE2', (VJH.AMT_PRICE_PER_UNIT * QTY_ORDER) AS 'PRICE_EXT', VJH.AMT_MATERIAL, VJH.AMT_LABOR, VJH.AMT_OVERHEAD, VJH.OUTS, VJH.FREIGHT, VJH.OTHER, (VJH.AMT_MATERIAL + VJH.AMT_LABOR + VJH.AMT_OVERHEAD + VJH.OUTS + VJH.FREIGHT + VJH.OTHER) AS 'TOTALCOST', '' AS 'CodeSort2', PRIORITY,  RTRIM(COALESCE(VJH.PART,'')) AS PART,VJH.LOCATION,VJH.PRODUCT_LINE, DATE_OPENED,(SELECT TOP 1 VJO.DATE_START FROM V_JOB_OPERATIONS VJO WHERE VJO.LMO = 'L' AND VJO.JOB = VJH.JOB AND VJO.SUFFIX = VJH.SUFFIX AND VJO.SEQ < '990000') AS DATE_START, CONCAT(VJH.JOB,VJH.SUFFIX) AS JS,CONVERT(0,SQL_BIT) AS IND_FLAG,CONVERT(0,SQL_BIT) AS LATE,'' AS PCS_REM,  '' as 'SOUSER_3', '' as 'SOUSER_4', '' as 'SOUSER_5', '' as 'SONotes', '' AS 'RowChange', CONVERT('1900-01-01',SQL_DATE) as 'SODate', ' ' as 'SOTerms', VJH.PHASE, VJH.JOB, VJH.SUFFIX, VJH.AMT_PRICE_PER_UNIT, APS.JSS FROM V_JOB_HEADER VJH LEFT JOIN V_CUSTOMER_MASTER VCM ON VJH.CUSTOMER=VCM.CUSTOMER  LEFT JOIN V_WO_USER_FLDS VWUF ON VJH.JOB = VWUF.JOB AND VJH.SUFFIX = VWUF.SUFFIX LEFT JOIN GAB_4169_WO_NOTES GWN ON VJH.JOB = GWN.JOB AND VJH.SUFFIX = GWN.SUFFIX LEFT JOIN V_ORDER_TO_WO OWO ON VJH.JOB = OWO.JOB AND VJH.SUFFIX = OWO.SUFFIX LEFT JOIN V_ORDER_LINES VOL ON OWO.ORDER_NO = VOL.ORDER_NO AND OWO.ORDER_LINE = VOL.RECORD_NO LEFT JOIN V_ORDER_BILL_TO VOB ON VOL.ORDER_NO = VOB.ORDER_NO LEFT JOIN APSV3_JBLines APS ON VJH.JOB = APS.JOB AND VJH.SUFFIX = APS.SFX AND APS.SEQTYPE = 1 AND IFNULL(APS.COMPLDATE,'1900-01-01')='1900-01-01' WHERE DATE_CLOSED = '1900-1-1' AND LEFT(VJH.JOB,1)<>'Z' AND VJH.Customer='{0}' AND VJH.SALES_ORDER='{1}' ORDER BY WOLabel, SEQ, DATE_DUE",v.Args.Customer,V.Args.SalesOrder,v.Local.ssql2)
		F.Intrinsic.String.Build("SELECT DISTINCT A.LMO,CAST(0 AS BIT) AS 'SelectWO',' ' AS 'DISPLAY_PART', ' ' as 'PrtDocCntrl',  C.DATE_DUE, ' ' AS 'CUR_OPER', ' ' AS 'MaterialIssue', ' ' AS 'MaterialManage', ' ' AS 'JobStatus', CONCAT(A.JOB,CONCAT('-',rtrim(A.SUFFIX))) AS 'WOLabel', C.SALES_ORDER, C.SALES_ORDER_LINE, CONCAT(C.SALES_ORDER,C.SALES_ORDER_LINE) AS 'SALESORDERLINE', RTRIM(C.PART) AS 'Part', C.PART_DESCRIPTION, ' ' AS 'CodeSort', A.SEQ, rtrim(IF(INV_LXR.DISPLAY_PART is null, SUBSTRING(A.PART, 1, 20), INV_LXR.DISPLAY_PART)) AS 'DISPLAY_MAT', RTRIM(A.PART) as 'MatPart',  IFNULL(D.PRODUCT_LINE,'') AS 'PL', IFNULL(D.code_sort,'') AS 'InvCodeSort', A.DESCRIPTION AS DESCR, IF(F.CODE_SOURCE='P','PS',IF(F.CODE_SOURCE='J','PJ','PJ')) AS 'CODE_SOURCE', A.BURDEN, B.PCSTOPROD, IF(D.QTY_ONHAND IS NULL,'0.0000',D.QTY_ONHAND) AS QTY_ONHAND, B.PCSCOMPL,  (B.PCSTOPROD - B.PCSCOMPL) AS PCSREMAIN, IFNULL(RTRIM(E.VENDOR),(SELECT RTRIM(NAME_VENDOR) FROM V_INVENTORY_ALL Y WHERE D.PART=Y.PART and D.LOCATION = Y.LOCATION)) AS 'VENDOR',IFNULL(E.VENDOR,A.OPERATION) AS 'OutsideVENDOR', 'BROWSE' AS 'VendorSearch',  '' AS 'VendorName', IF(A.LEAD_TIME=0,0,A.LEAD_TIME/40) AS 'LEAD_TIME', '' as 'PartFriendly', E.PURCHASE_ORDER,LEFT(E.RECORD_NO,3) AS LINE,If(IsNull(G.TEXT,'') <> '',G.TEXT,W.Text) as Text, CONCAT(PURCHASE_ORDER,LEFT(E.RECORD_NO,3)) AS 'POANDLINE', IF(E.DATE_DUE_LINE = '1900-1-1',NULL,E.DATE_DUE_LINE) AS DATE_DUE_LINE, A.DATE_DUE AS 'LINEDUE', D.AMT_COST, D.AMT_ALT_COST, IF(RTRIM(D.UM_PURCHASING)='',D.UM_INVENTORY,D.UM_PURCHASING) AS 'PURUM', IFNULL(E.COST,(SELECT IF(AMT_ALT_COST=0,AMT_COST,AMT_ALT_COST) FROM V_INVENTORY_MSTR Z WHERE Z.PART=D.PART AND Z.LOCATION=D.LOCATION)) AS 'COST', IFNULL(E.Extension, (SELECT IF(AMT_ALT_COST=0,AMT_COST,AMT_ALT_COST)*B.PCSTOPROD FROM V_INVENTORY_MSTR Z WHERE Z.PART=D.PART AND Z.LOCATION=D.LOCATION)) AS 'EXTENSION',' ' as 'JobSteps', CONCAT(A.JOB,A.SUFFIX) AS 'JS', CONCAT(CONCAT(A.JOB,A.SUFFIX),A.SEQ) AS JSS, A.JOB, A.SUFFIX, C.LOCATION FROM V_JOB_OPERATIONS A WITH (INDEX (JOBOP565701))LEFT JOIN V_JOB_HEADER C ON A.JOB = C.JOB AND A.SUFFIX = C.SUFFIX LEFT JOIN INVENTORY_MSTR D ON A.PART = D.PART AND C.LOCATION = D.LOCATION LEFT JOIN INV_LXR ON A.PART = INV_LXR.GSS_PART LEFT JOIN INVENTORY_MST2 F ON A.PART = F.PART AND C.LOCATION = F.LOCATION LEFT JOIN APSV3_JBLINES B ON JSS = B.JSS  LEFT JOIN V_PO_LINES E ON A.JOB = E.JOB AND A.SUFFIX = E.SUFFIX AND A.SEQ = E.SEQUENCE LEFT JOIN PO_LN_TEXT G ON E.PURCHASE_ORDER = G.PO_NUM AND E.RECORD_NO = G.LINE left join WO_Seq_Comments w on A.Job = w.WO and  A.Suffix = w.WO_Suffix and A.seq = w.WO_Seq WHERE A.FLAG_CLOSED <> 'Y'  AND A.LMO in ('M','O') AND (A.SEQ NOT IN ('995000','998000') AND LEFT(A.SEQ,1)<>'9' ) AND LEFT(A.JOB,1)<>  'Z'  AND  C.DATE_CLOSED='1900-01-01'  AND PL<>'53' AND C.Customer='{0}' AND C.SALES_ORDER='{1}' ORDER BY A.SEQ;",v.Args.Customer,V.Args.SalesOrder,v.Local.ssql3)
		F.Intrinsic.String.Build("SELECT DISTINCT CAST(0 AS BIT) AS 'SelectWO',' ' AS 'DISPLAY_PART', ' ' as 'PrtDocCntrl',  C.DATE_DUE, ' ' AS 'CUR_OPER', ' ' AS 'MaterialIssue', ' ' AS 'MaterialManage', ' ' AS 'JobStatus', CONCAT(A.JOB,CONCAT('-',rtrim(A.SUFFIX))) AS 'WOLabel', C.SALES_ORDER, C.SALES_ORDER_LINE, CONCAT(C.SALES_ORDER,C.SALES_ORDER_LINE) AS 'SALESORDERLINE', RTRIM(C.PART) AS 'Part', C.PART_DESCRIPTION, ' ' AS 'CodeSort', A.SEQ, rtrim(IF(INV_LXR.DISPLAY_PART is null, SUBSTRING(A.PART, 1, 20), INV_LXR.DISPLAY_PART)) AS 'DISPLAY_MAT', RTRIM(A.PART) as 'MatPart',  IFNULL(D.PRODUCT_LINE,C.PRODUCT_LINE) AS 'PL', A.DESCRIPTION AS DESCR, IF(F.CODE_SOURCE='P','PS',IF(F.CODE_SOURCE='J','PJ','PJ')) AS 'CODE_SOURCE', A.BURDEN, B.PCSTOPROD, IF(D.QTY_ONHAND IS NULL,'0.0000',D.QTY_ONHAND) AS QTY_ONHAND, B.PCSCOMPL,  (B.PCSTOPROD - B.PCSCOMPL) AS PCSREMAIN, IFNULL(E.VENDOR,A.OPERATION) AS 'VENDOR', 'BROWSE' AS 'VendorSearch',  '' AS 'VendorName', IF(A.LEAD_TIME=0,0,A.LEAD_TIME/40) AS 'LEAD_TIME', '' as 'PartFriendly', E.PURCHASE_ORDER,LEFT(E.RECORD_NO,3) AS LINE,G.TEXT,  CONCAT(PURCHASE_ORDER,LEFT(E.RECORD_NO,3)) AS 'POANDLINE', IF(E.DATE_DUE_LINE = '1900-1-1',NULL,E.DATE_DUE_LINE) AS DATE_DUE_LINE, A.DATE_DUE AS 'LINEDUE', D.AMT_COST, D.AMT_ALT_COST, IF(RTRIM(D.UM_PURCHASING)='',D.UM_INVENTORY,D.UM_PURCHASING) AS 'PURUM', IFNULL(E.COST,(SELECT IF(AMT_ALT_COST=0,AMT_COST,AMT_ALT_COST) FROM V_INVENTORY_MSTR Z WHERE Z.PART=D.PART)) AS 'COST', IFNULL(E.Extension, (SELECT IF(AMT_ALT_COST=0,AMT_COST,AMT_ALT_COST)*B.PCSTOPROD FROM V_INVENTORY_MSTR Z WHERE Z.PART=D.PART)) AS 'EXTENSION',' ' as 'JobSteps', CONCAT(A.JOB,A.SUFFIX) AS 'JS', CONCAT(CONCAT(A.JOB,A.SUFFIX),A.SEQ) AS JSS, A.JOB, A.SUFFIX, C.LOCATION FROM V_JOB_OPERATIONS A LEFT JOIN INV_LXR ON A.PART = INV_LXR.GSS_PART LEFT JOIN APSV3_JBLINES B ON JSS = B.JSS  LEFT JOIN V_JOB_HEADER C ON A.JOB = C.JOB AND A.SUFFIX = C.SUFFIX LEFT JOIN INVENTORY_MSTR D ON A.PART = D.PART AND C.LOCATION = D.LOCATION LEFT JOIN INVENTORY_MST2 F ON A.PART = F.PART AND C.LOCATION = F.LOCATION LEFT JOIN V_PO_LINES E ON A.JOB = E.JOB AND A.SUFFIX = E.SUFFIX AND A.SEQ = E.SEQUENCE LEFT JOIN PO_LN_TEXT G ON E.PURCHASE_ORDER = G.PO_NUM AND E.RECORD_NO = G.LINE WHERE A.LMO = 'O' AND A.SEQ NOT IN ('995000','998000') AND C.DATE_CLOSED='1900-01-01' AND LEFT(A.JOB,1)<>'Z' AND FLAG_CLOSED <> 'Y' AND PL<>'53' AND LEFT(A.SEQ,1)<>'9' C.CUSTOMER='{0}' AND C.SALES_ORDERS='{1}' ORDER BY A.SEQ",v.Args.Customer,V.Args.SalesOrder,v.Local.ssql4)
	f.Intrinsic.Control.EndIf
	
	'update the query accordingly and create datatable
	'For all records
	gui.FrmMaster.prgBar.Value(1)
	gui.FrmMaster.lblDateUpdated.Caption("Building Prelim WO Data")
	f.Intrinsic.Control.CallSub(cleanQuery,"Active",v.Local.bActive,"Query",v.Local.sSql)
	f.Intrinsic.Variable.ArgToVar("rSQL",v.Local.sSql)
	F.Data.DataTable.CreateFromSQL("dtAll","CON",v.Local.sSQL,True)
	
	'For workcentre dispatch
	gui.FrmMaster.prgBar.Value(2)
	gui.FrmMaster.lblDateUpdated.Caption("Building Prelim Workcentre Data")
	f.Intrinsic.Control.CallSub(cleanQuery,"Active",v.Local.bActive,"Query",v.Local.sSql2)
	f.Intrinsic.Variable.ArgToVar("rSQL",v.Local.sSql2)
	F.Data.DataTable.CreateFromSQL("dtOper","CON",v.Local.sSQL2,True)
	f.Data.DataView.Create("dtOper","dvOper",22,"","SEQRES ASC, DAYS_LATE ASC")
	
	'For material list
	gui.FrmMaster.prgBar.Value(3)
	gui.FrmMaster.lblDateUpdated.Caption("Building Prelim Material Data")
	f.Intrinsic.Control.CallSub(cleanQuery,"Active",v.Local.bActive,"Query",v.Local.sSql3)
	f.Intrinsic.Variable.ArgToVar("rSQL",v.Local.sSql3)
	
	'Create table for Material and Outside then later filter for material dtAllM and outside dtAllO
	f.Intrinsic.Control.If(v.DataTable.dtMO.Exists)
		f.Data.DataTable.Close("dtMO")
	f.Intrinsic.Control.EndIf
	F.Data.DataTable.CreateFromSQL("dtMO","CON",v.Local.sSQL3,True)
	
	'For dtAllM from dtMO
	f.Data.DataView.Create("dtMO","vMO",22,"LMO = 'M'","")
	f.Data.DataView.ToDataTable("dtMO","vMO","dtAllM",True)
	f.Data.DataTable.RemoveColumn("dtAllM","OutsideVendor")
	f.Data.DataTable.RemoveColumn("dtAllM","LMO")
	'F.Data.DataTable.CreateFromSQL("dtAllM","CON",v.Local.sSQL3,True)
	f.Data.DataView.Create("dtAllM","dvAllM",22,"","")
	
	'For outside list - dtAllO from dtMO
	gui.FrmMaster.prgBar.Value(3)
	gui.FrmMaster.lblDateUpdated.Caption("Building Prelim Outside Data")
	f.Intrinsic.Control.CallSub(cleanQuery,"Active",v.Local.bActive,"Query",v.Local.sSql4)
	f.Intrinsic.Variable.ArgToVar("rSQL",v.Local.sSql4)
'	F.Data.DataTable.CreateFromSQL("dtAllO","CON",v.Local.sSql4,True)	
	f.Data.DataView.SetFilter("dtMO","vMO","LMO = 'O'")
	f.Data.DataView.ToDataTable("dtMO","vMO","dtAllO",True)
	f.Data.DataTable.RemoveColumn("dtAllO","Vendor")
	f.Data.DataTable.AddColumn("dtAllO","Vendor","String","")
	f.Data.DataTable.CopyColumn("dtAllO","OutsideVendor","Vendor")
	f.Data.DataTable.RemoveColumn("dtAllO","OutsideVendor")
	f.Data.DataTable.RemoveColumn("dtAllO","LMO")

	f.Data.DataView.Create("dtAllO","dvAllO",22,"","")
	
	'Long Part
	gui.FrmMaster.prgBar.Value(4)
	gui.FrmMaster.lblDateUpdated.Caption("Checking for Long Part")
	f.Intrinsic.Control.If(v.Global.bLongPart)
		F.Data.Dictionary.CreateFromSQL("dLongPart","con","select rtrim(GSS_PART) AS 'PART', rtrim(DISPLAY_PART) AS 'DISPLAY_PART' FROM INV_LXR")
		F.Data.Datatable.FillFromDictionary("dtAll","dLongPart","PART","DISPLAY_PART")
		F.Data.Datatable.FillFromDictionary("dtAll","dLongPart","PART","PartFriendly")
		F.Data.Datatable.FillFromDictionary("dtAllM","dLongPart","PART","DISPLAY_PART")
		F.Data.Datatable.FillFromDictionary("dtAllM","dLongPart","PART","PartFriendly")
		F.Data.Datatable.FillFromDictionary("dtAllO","dLongPart","PART","DISPLAY_PART")
		F.Data.Datatable.FillFromDictionary("dtAllO","dLongPart","PART","PartFriendly")
		F.Data.Datatable.FillFromDictionary("dtOper","dLongPart","PART","DISPLAY_PART")
		F.Data.Datatable.FillFromDictionary("dtOper","dLongPart","PART","PartFriendly")
		F.Data.Dictionary.Close("dLongPart")
	f.Intrinsic.Control.Else
		F.Data.DataTable.CopyColumn("dtAll","PART","DISPLAY_PART")
		F.Data.DataTable.CopyColumn("dtAll","PART","PartFriendly")
		F.Data.DataTable.CopyColumn("dtOper","PART","DISPLAY_PART")
		F.Data.DataTable.CopyColumn("dtOper","PART","PartFriendly")
		F.Data.DataTable.CopyColumn("dtAllM","PART","DISPLAY_PART")
		F.Data.DataTable.CopyColumn("dtAllM","PART","PartFriendly")
		F.Data.DataTable.CopyColumn("dtAllO","PART","DISPLAY_PART")
		F.Data.DataTable.CopyColumn("dtAllO","PART","PartFriendly")
	f.Intrinsic.Control.EndIf
	
	'Add expression column for vendor / cost
	f.Data.DataTable.AddExpressionColumn("dtAllM","Vendor2","String","Vendor")
	f.Data.DataTable.AddExpressionColumn("dtAllM","Cost2","Float","Cost")
	
	'Job Steps Logic
	gui.FrmMaster.prgBar.Value(5)
	gui.FrmMaster.lblDateUpdated.Caption("Building Prelim Job Steps")
	f.Intrinsic.Control.If(v.DataTable.dtAll.RowCount,>,0)
		f.Intrinsic.Math.Mult(v.DataTable.dtAll.RowCount,2,v.Local.iMax)
	f.Intrinsic.Control.EndIf
	
	'Get the mininum job number
	f.ODBC.Connection!CON.ExecuteAndReturn("Select Min(Job) as JobMin from v_Job_header WHERE DATE_CLOSED = '1900-1-1' ",v.Local.sMinJob)
	f.Intrinsic.Control.If(v.Local.sMinJob,=,"")
		v.Local.sMinJob.Set("000000")
	f.Intrinsic.Control.EndIf
	
	'Get all Job Operations where job >= minjob. This is to avoid getting the whole v_job_operations which is too big	
	f.Intrinsic.String.Build("Select Job, Suffix, Seq, LMO, Description, Part as PartWO, Flag_Closed, Units_Open, Date_Start, Date_Due, PO_Assigned,'' as POHead, Date_PO_Order,Job + '-' + Suffix + '-' + Seq as JobSuffixSeq from Job_Operations where Job >= '{0}' and LMO in ('L','O') and Seq < '990000' Order by Job,Suffix,Seq",v.Local.sMinJob,v.Local.sSQL)
	f.Intrinsic.Control.If(v.DataTable.JobOp.Exists)
		f.Data.DataTable.close("JobOp")
	f.Intrinsic.Control.EndIf
	f.Data.DataTable.CreateFromSQL("JobOp","CON",v.Local.sSQL,True)	
	
	'Get Order header Data
	gui.FrmMaster.prgBar.Value(6)
	gui.FrmMaster.lblDateUpdated.Caption("Building Prelim Order Header")
	f.Intrinsic.Control.If(v.DataTable.dtOrd.Exists)
		f.Data.DataTable.Close("dtOrd")
	f.Intrinsic.Control.EndIf
	f.Data.DataTable.CreateFromSQL("dtOrd","con","SELECT * FROM ORDER_HEADER")
	f.Intrinsic.Control.If(v.DataTable.dtSONotes.Exists)
		f.Data.DataTable.Close("dtSONotes")
	f.Intrinsic.Control.EndIf
	f.Data.DataTable.CreateFromSQL("dtSONotes","con","SELECT * FROM GAB_4167_SO_NOTES")
	
	'Get all Material steps
	gui.FrmMaster.prgBar.Value(7)
	gui.FrmMaster.lblDateUpdated.Caption("Building Prelim Material Status")
	f.Intrinsic.Control.If(v.DataTable.JobMat.Exists)
		f.Data.DataTable.close("JobMat")
	f.Intrinsic.Control.EndIf
	f.Data.DataTable.CreateFromSQL("JobMat","Con","SELECT DISTINCT JOB, SUFFIX, FLAG_CLOSED FROM JOB_OPERATIONS WHERE LMO='M' and (seq<>'995000' and seq<>'998000')",true)
	
	'Vendor Master
	gui.FrmMaster.prgBar.Value(8)
	gui.FrmMaster.lblDateUpdated.Caption("Building Vendor Dictionary")
	F.Data.Dictionary.CreateFromSQL("dVend","con","Select RTRIM(VENDOR) AS 'Vendor', RTRIM(NAME_VENDOR) as 'VendorName' From V_VENDOR_MASTER")
	F.Data.DataTable.FillFromDictionary("dtAllO","dVend","Vendor","VendorName")
	F.Data.DataTable.FillFromDictionary("dtAllM","dVend","Vendor","VendorName")
	F.Data.Dictionary.Close("dVend")
	
	'Work Order Notes
	'nEEDS TO BE DONE LINE BY LINE!  IF no PO exists, then take the comments from WO Comments
	'If PO exists, take the comments from PO Comments
	gui.FrmMaster.prgBar.Value(9)
	gui.FrmMaster.lblDateUpdated.Caption("Building and Filling Work Order Extra Text  Dictionary")
'	F.Data.Dictionary.CreateFromSQL("dWOSQ","con","select CONCAT(WO,CONCAT(WO_SUFFIX,WO_SEQ)) AS JSS, IFNULL(TEXT, ' ') AS 'TEXT' from WO_SEQ_COMMENTS")
'	F.Data.Dictionary.SetDefaultReturn("dWOSQ","")
	'F.Data.Datatable.FillFromDictionary("dtAllM","dWOSQ","JSS","TEXT")
'	F.Data.Datatable.FillFromDictionary("dtAllO","dWOSQ","JSS","TEXT")
'	F.Data.Dictionary.Close("dWOSQ")
	
	'PO Notes
	gui.FrmMaster.prgBar.Value(10)
	gui.FrmMaster.lblDateUpdated.Caption("Building PO Extra Text Dictionary")
	F.Intrinsic.Control.If(V.DataTABLE.dtPOSQ.Exists)
		F.Data.DataTable.Close("dtPOSQ")
	F.Intrinsic.Control.EndIf
	F.Data.Datatable.CreateFromSQL("dtPOSQ","con","select CONCAT(PO_NUM,LEFT(LINE,3)) AS POANDLINE, IFNULL(TEXT, ' ') AS 'TEXT' from PO_LN_TEXT",true)
	
	'Get Job Steps	
	gui.FrmMaster.prgBar.Value(11)
	gui.FrmMaster.lblDateUpdated.Caption("Adding Completion Flag for Job Steps")
	
	f.Data.DataTable.AddExpressionColumn("JobOp","JobSteps","String","IIF(Flag_Closed = 'Y','~' + trim(PartWO),trim(PartWO))")
	'f.Data.DataTable.AddExpressionColumn("JobOp","JobSteps","String","IIF(Flag_Closed = 'Y',IIF(trim(PartWO) = 'TASK','~' + trim(Description),'~' + trim(PartWO)),IIF(trim(PartWO) = 'TASK',trim(Description),trim(PartWO)))")
	f.Data.DataView.Create("JobOp","dvJobOp")
	f.Intrinsic.Math.Add(v.DataTable.dtAll.RowCount,1,v.Local.lMax)
	F.Intrinsic.Control.If(v.Local.lMax,=,0)
		v.Local.lMax.Set(1)
	F.Intrinsic.Control.EndIf
	
	'Add Dataviews and MyRowID
	f.Data.DataView.Create("dtAll","dvAll")
	F.Data.DataView.ToDataTable("dtAll","dvAll","dtAll2",True)
	f.Data.DataView.Create("dtAll2","dvAll2")
	f.Data.DataTable.AddColumn("dtAll2","MyRowID",Integer)
	f.Data.DataTable.AddColumn("dtAllO","MyRowID",Integer)
	f.Data.DataTable.AddColumn("dtAllM","MyRowID",Integer)
	f.Data.DataTable.AddColumn("dtOper","MyRowID",Integer)
	
	'Doc control for part
	F.Data.DataTable.SetValue("dtAll2",-1,"PrtDocCntrl","DCS-OFF")
	F.Data.Dictionary.CreateFromSQL("dDCC","con","Select rtrim(ID) As Part,'DCS-ON' As DCC From Link_Data Where Type = '00030'")
	F.Data.Dictionary.SetDefaultReturn("dDCC","DCS-OFF")
	F.Data.DataTable.FillFromDictionary("dtAll2","dDCC","PART","PrtDocCntrl")
	F.Data.Dictionary.Close("dDCC")
	
	'SO Terms
	gui.FrmMaster.prgBar.Value(12)
	gui.FrmMaster.lblDateUpdated.Caption("Filling SO Terms from Dictionary")
	f.Data.Dictionary.CreateFromSQL("dSOTerms","con","SELECT ORDER_NO AS 'SALES_ORDER', TERMS FROM V_ORDER_HEADER")
	f.Data.Dictionary.SetDefaultReturn("dSOTerms","")
	F.Data.DataTable.FillFromDictionary("dtAll2","dSOTerms","JS","SOTERMS")
	F.Data.Dictionary.Close("dSOTerms")
	
	'CodeSort
	gui.FrmMaster.prgBar.Value(13)
	gui.FrmMaster.lblDateUpdated.Caption("Filling Code Sort from Dictionary")

	f.Data.Dictionary.CreateFromSQL("dCodeSort","con","SELECT ORDER_NO AS 'SALES_ORDER', CODE_SORT FROM V_ORDER_HEADER")
	F.Data.Dictionary.SetDefaultReturn("dCodeSort","")
	F.Data.DataTable.FillFromDictionary("dtAll2","dCodeSort","SALES_ORDER","CodeSort")
	F.Data.DataTable.FillFromDictionary("dtAllO","dCodeSort","SALES_ORDER","CodeSort")
	F.Data.DataTable.FillFromDictionary("dtAllM","dCodeSort","SALES_ORDER","CodeSort")
	F.Data.DataTable.FillFromDictionary("dtOper","dCodeSort","SALES_ORDER","CodeSort")
	F.Data.Dictionary.Close("dCodeSort")
	
	'CodeSort2
	gui.FrmMaster.prgBar.Value(14)
	gui.FrmMaster.lblDateUpdated.Caption("Filling Code Sort 2 from Dictionary")
	f.Data.Dictionary.CreateFromSQL("dCodeSort2","con","SELECT ORDER_NO AS 'SALES_ORDER', ORDER_SORT_2 FROM V_ORDER_HEADER")
	F.Data.Dictionary.SetDefaultReturn("dCodeSort2","")
	F.Data.DataTable.FillFromDictionary("dtAll2","dCodeSort2","SALES_ORDER","CodeSort2")
	F.Data.Dictionary.Close("dCodeSort2")
	
	'SoDATE
	gui.FrmMaster.prgBar.Value(15)
	gui.FrmMaster.lblDateUpdated.Caption("Filling SO Date from Dictionary")
	f.Data.Dictionary.CreateFromSQL("dSodate","con","SELECT ORDER_NO AS 'SALES_ORDER', DATE_ORDER FROM V_ORDER_HEADER")
	F.Data.Dictionary.SetDefaultReturn("dSodate","01/01/1900")
	F.Data.DataTable.FillFromDictionary("dtAll2","dSoDATE","SALES_ORDER","SoDATE")
	F.Data.Dictionary.Close("dSoDATE")
	
	'SOUSER_3
	gui.FrmMaster.prgBar.Value(16)
	gui.FrmMaster.lblDateUpdated.Caption("Filling SO User 3 from Dictionary")
	f.Data.Dictionary.CreateFromSQL("dSOUSER_3","con","SELECT CONCAT(ORDER_NO,RECORD_NO) AS 'SALESORDERLINE', USER_3 FROM V_ORDER_LINES")
	F.Data.Dictionary.SetDefaultReturn("dSOUSER_3","")
	F.Data.DataTable.FillFromDictionary("dtAll2","dSOUSER_3","SALESORDERLINE","SOUSER_3")
	F.Data.Dictionary.Close("dSOUSER_3")
	
	'SOUSER_4
	gui.FrmMaster.prgBar.Value(17)
	gui.FrmMaster.lblDateUpdated.Caption("Filling SO User 4 from Dictionary")
	f.Data.Dictionary.CreateFromSQL("dSOUSER_4","con","SELECT CONCAT(ORDER_NO,RECORD_NO) AS 'SALESORDERLINE', USER_4 FROM V_ORDER_LINES")
	F.Data.Dictionary.SetDefaultReturn("dSOUSER_4","")
	F.Data.DataTable.FillFromDictionary("dtAll2","dSOUSER_4","SALESORDERLINE","SOUSER_4")
	F.Data.Dictionary.Close("dSOUSER_4")
	
	'SOUSER_5
	gui.FrmMaster.prgBar.Value(18)
	gui.FrmMaster.lblDateUpdated.Caption("Filling SO User 5 from Dictionary")
	f.Data.Dictionary.CreateFromSQL("dSOUSER_5","con","SELECT CONCAT(ORDER_NO,RECORD_NO) AS 'SALESORDERLINE', USER_5 FROM V_ORDER_LINES")
	F.Data.Dictionary.SetDefaultReturn("dSOUSER_5","")
	F.Data.DataTable.FillFromDictionary("dtAll2","dSOUSER_5","SALESORDERLINE","SOUSER_5")
	F.Data.Dictionary.Close("dSOUSER_5")
	
	'SONotes
	gui.FrmMaster.prgBar.Value(19)
	gui.FrmMaster.lblDateUpdated.Caption("Filling SO Notes from Dictionary")
	F.Data.Dictionary.CreateFromSQL("dSONotes","con","SELECT CONCAT(SO,CONCAT(SOLINE,'0')) AS 'SALESORDERLINE', NOTES AS 'SONotes' FROM GAB_4167_SO_NOTES")
	F.Data.Dictionary.SetDefaultReturn("dSONotes","")
	F.Data.DataTable.FillFromDictionary("dtAll2","dSONotes","JS","SONotes")
	F.Data.Dictionary.Close("dSONotes")
	
	'Customer PO
	gui.FrmMaster.prgBar.Value(20)
	gui.FrmMaster.lblDateUpdated.Caption("Customer PO")
	f.Data.Dictionary.createfromdatatable("dCustomerPO","dtAll2","SALES_ORDER","Customer_PO")
	f.Data.Dictionary.SetDefaultReturn("dCustomerPO","")
	f.Data.DataTable.FillFromDictionary("dtOper","dCustomerPO","Sales_Order","Customer_PO")
	f.Data.Dictionary.Close("dCustomerPO")
	
	'Material Status
	gui.FrmMaster.prgBar.Value(21)
	gui.FrmMaster.lblDateUpdated.Caption("Material Issue")
	f.Intrinsic.Control.If(v.DataTable.dtIssue.Exists)
        f.Data.DataTable.close("dtIssue")
    f.Intrinsic.Control.EndIf
    f.Data.DataTable.CreateFromSQL("dtIssue","con","select Job+Suffix as JS,count(*) as SeqCount from Job_Operations where  LMO = 'M' and Seq < '999999' and seq<>'995000' group by job,suffix",True)
	f.Data.Dictionary.CreateFromSQL("dAllReadyIssue","con","select Job+Suffix as JS,count(*) as SeqCount from Job_Operations where  LMO = 'M' and Seq < '999999' and seq<>'995000' and IsNull(Flag_Closed,'') = 'Y' group by job,suffix")
    f.Data.Dictionary.SetDefaultReturn("dAllReadyIssue",0)
    f.Data.DataTable.AddColumn("dtIssue","SeqIssuedNum",Long,0)
    f.Data.DataTable.FillFromDictionary("dtIssue","dAllReadyIssue","JS","SeqIssuedNum")
    f.Data.DataTable.AddExpressionColumn("dtIssue","FlagIssue","String","IIF(SeqIssuedNum = SeqCount,'ALL',IIF(SeqIssuedNum = 0,'NONE','SOME'))")
    f.Data.Dictionary.CreateFromDatatable("dFlagIssue","dtIssue","JS","FlagIssue")
    f.Data.Dictionary.SetDefaultReturn("dFlagIssue","")
    f.Data.DataTable.FillFromDictionary("dtAll2","dFlagIssue","JS","MaterialIssue")
    f.Data.DataTable.FillFromDictionary("dtOper","dFlagIssue","JS","MaterialIssue")
    f.Data.DataTable.FillFromDictionary("dtAllM","dFlagIssue","JS","MaterialIssue")
    f.Data.DataTable.FillFromDictionary("dtAllO","dFlagIssue","JS","MaterialIssue")
    f.Data.Dictionary.close("dFlagIssue")
    f.Data.Dictionary.close("dAllReadyIssue")
		
	'Create dictionaries from APS table: logic: select top 2 record for each job+suffix. Based on fields to get, will need to first or the second record, so will use the dictionaries differently
	'Before this, they use a record set of top 2 row to find the value for these variables:
	V.Local.sDept.Set("")
	V.Local.sCurOper.Set("")
	V.Local.dCurOperDate.Set(01/01/1900)
	V.Local.sNextOper.Set("")
	V.Local.sOutside.Set("")	
	
	'Department (first row)
	gui.FrmMaster.prgBar.Value(22)
	gui.FrmMaster.lblDateUpdated.Caption("Department Load")
	f.Data.Dictionary.CreateFromSQL("dDept","con","Select A.JOB + A.SFX as JS,If(A.SeqType = '3','',IF(WORK_GROUP <> '',D.WC_DEPT,B.WC_DEPT))  AS DEPT FROM APSV3_JBLINES A  LEFT JOIN WORKCENTERS B ON A.SEQRES = B.MACHINE  LEFT JOIN WORKGROUP_HEAD C ON A.SEQRES = C.WORK_GROUP   LEFT JOIN WORKCENTERS D ON C.PROTOTYPE_WC = D.MACHINE  WHERE A.COMPLDATE IS NULL AND A.SEQTYPE <> '2'    ORDER BY A.JOB,A.SFX,A.SEQ")
	f.Data.Dictionary.SetDefaultReturn("dDept","")
	f.Data.DataTable.FillFromDictionary("dtAll2","dDept","JS","DEPT")	
	f.Data.Dictionary.Close("dDept")
	
	'CurOp (first row)
	gui.FrmMaster.prgBar.Value(22)
	gui.FrmMaster.lblDateUpdated.Caption("Current Op Load")
	f.Data.Dictionary.CreateFromSQL("dCurOp","con"," Select A.JOB + A.SFX as JS,If(A.SeqType = '3','OUTSIDE',SeqRes) as CUR_OPER FROM APSV3_JBLINES A  LEFT JOIN WORKCENTERS B ON A.SEQRES = B.MACHINE  LEFT JOIN WORKGROUP_HEAD C ON A.SEQRES = C.WORK_GROUP   LEFT JOIN WORKCENTERS D ON C.PROTOTYPE_WC = D.MACHINE  WHERE A.COMPLDATE IS NULL AND A.SEQTYPE <> '2'    ORDER BY A.JOB,A.SFX,A.SEQ")
	f.Data.Dictionary.SetDefaultReturn("dCurOp","")
	f.Data.DataTable.FillFromDictionary("dtAll2","dCurOp","JS","CUR_OPER")
	F.Data.DataTable.FillFromDictionary("dtOper","dCurOp","JS","CUR_OPER")
	F.Data.DataTable.FillFromDictionary("dtAllM","dCurOp","JS","CUR_OPER")
	F.Data.DataTable.FillFromDictionary("dtAllO","dCurOp","JS","CUR_OPER")
	f.Data.Dictionary.Close("dCurOp")
	
	'dCurOperDate (first row)
	gui.FrmMaster.prgBar.Value(23)
	gui.FrmMaster.lblDateUpdated.Caption("Current Operation Date")
	f.Data.Dictionary.CreateFromSQL("dCurOperDate","con","Select A.JOB + A.SFX as JS,If(StartDate is Null,Convert('1900-01-01',SQL_Date),StartDate) as CUR_OPER_DATE FROM APSV3_JBLINES A  LEFT JOIN WORKCENTERS B ON A.SEQRES = B.MACHINE  LEFT JOIN WORKGROUP_HEAD C ON A.SEQRES = C.WORK_GROUP   LEFT JOIN WORKCENTERS D ON C.PROTOTYPE_WC = D.MACHINE  WHERE A.COMPLDATE IS NULL AND A.SEQTYPE <> '2'    ORDER BY A.JOB,A.SFX,A.SEQ")
	f.Data.Dictionary.SetDefaultReturn("dCurOperDate","1900-01-01")
	f.Data.DataTable.FillFromDictionary("dtAll2","dCurOperDate","JS","CUR_OPER_DATE")
	f.Data.Dictionary.Close("dCurOperDate")
	
	'sNextOper (second row)
	gui.FrmMaster.prgBar.Value(24)
	gui.FrmMaster.lblDateUpdated.Caption("Next Operation Date")
	f.Data.Dictionary.CreateFromSQL("dNextOper","con","  Select A.JOb + A.SFX as JS,If(A.SeqType = '3','OUTSIDE',SeqRes) as NEXT_OPER   FROM APSV3_JBLINES A LEFT JOIN WORKCENTERS B ON A.SEQRES = B.MACHINE  LEFT JOIN WORKGROUP_HEAD C ON A.SEQRES = C.WORK_GROUP  LEFT JOIN WORKCENTERS D ON C.PROTOTYPE_WC = D.MACHINE   left join (select JOB  + SFX as JS,min(Seq) as MinSeq from   APSV3_JBLINES where COMPLDATE IS NULL and SEQTYPE <> '2' group by job,sfx) X on a.JS = x.JS WHERE A.COMPLDATE IS NULL AND A.SEQTYPE <> '2'    and a.Seq > x.MinSeq   ORDER BY A.JOB,A.SFX,A.SEQ; ")	
	f.Data.Dictionary.SetDefaultReturn("dNextOper","")
	f.Data.DataTable.FillFromDictionary("dtAll2","dNextOper","JS","NEXT_OPER")
	f.Data.DataTable.FillFromDictionary("dtOper","dNextOper","JS","NEXT_OPER")
	f.Data.Dictionary.Close("dNextOper")
	
	'sPcsRem (second row)
	gui.FrmMaster.prgBar.Value(25)
	gui.FrmMaster.lblDateUpdated.Caption("Pieces Remaining")
	f.Data.Dictionary.CreateFromSQL("dPcsRem","con","  Select A.JOb + A.SFX as JS,PcsRemain   FROM APSV3_JBLINES A LEFT JOIN WORKCENTERS B ON A.SEQRES = B.MACHINE  LEFT JOIN WORKGROUP_HEAD C ON A.SEQRES = C.WORK_GROUP  LEFT JOIN WORKCENTERS D ON C.PROTOTYPE_WC = D.MACHINE   left join (select JOB  + SFX as JS,min(Seq) as MinSeq from   APSV3_JBLINES where COMPLDATE IS NULL and SEQTYPE <> '2' group by job,sfx) X on a.JS = x.JS WHERE A.COMPLDATE IS NULL AND A.SEQTYPE <> '2'    and a.Seq > x.MinSeq   ORDER BY A.JOB,A.SFX,A.SEQ; ")	
	f.Data.Dictionary.SetDefaultReturn("dPcsRem",0)	
	f.Data.DataTable.FillFromDictionary("dtAll2","dPcsRem","JS","PCS_REM")
	'f.Data.DataTable.FillFromDictionary("dtOper","dPcsRem","JS","PCS_REM")
	f.Data.Dictionary.Close("dPcsRem")
	''''''''''''''''''''''''''''''''''''''''''''''
	
	'Est_Hrs
	gui.FrmMaster.prgBar.Value(26)
	gui.FrmMaster.lblDateUpdated.Caption("Estimated Hours")
	f.Data.Dictionary.CreateFromSQL("dEst_Hrs","con","SELECT JS, Sum( CONVERT(HOURSORIG+INITSU,SQL_NUMERIC)) AS EST_HRS  FROM APSV3_JBLINES  WHERE (SEQTYPE = '1')  group by JS")
	f.Data.Dictionary.SetDefaultReturn("dEst_Hrs",0)	
	f.Data.DataTable.FillFromDictionary("dtAll2","dEst_Hrs","JS","EST_HRS")
	f.Data.Dictionary.Close("dEst_Hrs")
	
	'Rem_Hrs
	gui.FrmMaster.prgBar.Value(27)
	gui.FrmMaster.lblDateUpdated.Caption("Remaining Hours")
	f.Data.DataTable.AddExpressionColumn("dtAll2","Remaining_Hrs","float","EST_HRS - ACT_HRS")
	f.Data.Dictionary.createfromdatatable("dRemHrs","dtAll2","JS","Remaining_Hrs")
	f.Data.Dictionary.SetDefaultReturn("dRemHrs",0)
	f.Data.DataTable.FillFromDictionary("dtAll2","dRemHrs","JS","REM_HRS")
	f.Data.Dictionary.Close("dRemHrs")
	
	'Temporary columns to help with calculations
	F.Data.DataTable.AddColumn("dtAll2","TOT_HRS_REM_NO_FLOAT",Float,"0")
	F.Data.DataTable.AddColumn("dtAll2","TODAYS_DATE",Date,v.Ambient.Date)
	
	'Total hours remaining
	gui.FrmMaster.prgBar.Value(28)
	gui.FrmMaster.lblDateUpdated.Caption("Total Hours Remaining")
	f.Intrinsic.Control.If(v.DataTable.dtTotHours.Exists)
		f.Data.DataTable.Close("dtTotHours")
	f.Intrinsic.Control.EndIf
	f.Data.DataTable.CreateFromSQL("dtTotHours","con","SELECT JS, if((Sum( (((HOURSORIG+INITSU) * (1+(1-SPM))) - (If(HoursAppl > (HOURSORIG+INITSU),(HOURSORIG+INITSU),HoursAppl)) + Float))*-1)=0,0, (Sum( (((HOURSORIG+INITSU) * (1+(1-SPM))) - (If(HoursAppl > (HOURSORIG+INITSU),(HOURSORIG+INITSU),HoursAppl)) + Float))*-1)/8) AS TotHrsRem ,if((sum((((HOURSORIG+INITSU) * (1+(1-SPM))) - (If(HoursAppl > (HOURSORIG+INITSU),(HOURSORIG+INITSU),HoursAppl))))*-1)=0,0,(sum((((HOURSORIG+INITSU) * (1+(1-SPM))) - (If(HoursAppl > (HOURSORIG+INITSU),(HOURSORIG+INITSU),HoursAppl))))*-1)/8) AS TotHrsRemNoFloat  FROM APSV3_JBLINES  WHERE (SEQTYPE = '1' or SeqType = '3' )  AND IFNULL(COMPLDATE,'1900-01-01')  = '1900-01-01'  group by JS",True)
	f.Data.Dictionary.CreateFromDatatable("dTotHrsRem","dtTotHours","JS","TotHrsRem")
	f.Data.Dictionary.SetDefaultReturn("dTotHrsRem",0)
	f.Data.DataTable.FillFromDictionary("dtAll2","dTotHrsRem","JS","TOT_HRS_REM")
	f.Data.Dictionary.Close("dTotHrsRem")
	
	'Total hours remaining without float
	gui.FrmMaster.prgBar.Value(29)
	gui.FrmMaster.lblDateUpdated.Caption("Total Hours Remaining without float")
	f.Data.Dictionary.CreateFromDatatable("dTotHrsRemNoFloat","dtTotHours","JS","TotHrsRemNoFloat")
	f.Data.Dictionary.SetDefaultReturn("dTotHrsRemNoFloat",0)
	f.Data.DataTable.FillFromDictionary("dtAll2","dTotHrsRemNoFloat","JS","TOT_HRS_REM_NO_FLOAT")
	f.Data.Dictionary.Close("dTotHrsRemNoFloat")
	
	'Subtract the hours converted into days from the due date 
	F.Data.DataTable.DateAdd("dtAll2","DATE_DUE_NEW","d","TOT_HRS_REM","DATE_DUE_FLOAT")
	F.Data.DataTable.DateAdd("dtAll2","DATE_DUE_NEW","d","TOT_HRS_REM_NO_FLOAT","DATE_DUE_NO_FLOAT")

	'======Bao added for removing Date processing in loop==================
	gui.FrmMaster.prgBar.Value(30)
	gui.FrmMaster.lblDateUpdated.Caption("Job Status Calculation")
	f.Data.DataTable.AddColumn("dtAll2","Diff1","Long",0)
	f.Data.DataTable.AddColumn("dtAll2","Diff2","Long",0)
	f.Data.DataTable.DateDiff("dtAll2","SCHEDULED_DUE_DATE","DATE_DUE","d","Diff1")
	F.Data.DataTable.CopyColumn("dtAll2","Diff1","DAYS_LATE")
	
	f.Data.DataTable.DateDiff("dtAll2","DATE_DUE_FLOAT","TODAYS_DATE","d","Diff1")	
	f.Data.DataTable.DateDiff("dtAll2","DATE_DUE_NO_FLOAT","TODAYS_DATE","d","Diff2")	
	
	F.Data.DataTable.DateAdd("dtAll2","DATE_DUE_NEW","d","Diff1","DATE_DUE_FLOAT")
	F.Data.DataTable.DateAdd("dtAll2","DATE_DUE_NEW","d","Diff2","DATE_DUE_NO_FLOAT")
	
	f.Data.DataTable.AddExpressionColumn("dtAll2","Status2","String","IIF(DATE_DUE > DATE_DUE_FLOAT,'OKAY',IIF(DATE_DUE >= DATE_DUE_NO_FLOAT,'ATTENTION','ISSUE'))")
	F.Data.DataTable.CopyColumn("dtAll2","Status2","JobStatus")
	f.Data.DataTable.RemoveColumn("dtall2","Status2")
	
	F.Data.DataTable.RemoveColumn("dtAll2","Diff1")
	F.Data.DataTable.RemoveColumn("dtAll2","Diff2")
	'====================================================================
	
	'Job Steps
	gui.FrmMaster.prgBar.Value(30)
	gui.FrmMaster.lblDateUpdated.Caption("Job Step Calculation")
	f.Intrinsic.Control.CallSub(Process_JobSteps)
	
	'Fill Job Status for Outside Process Tab
	gui.FrmMaster.prgBar.Value(31)
	gui.FrmMaster.lblDateUpdated.Caption("Filling Outside Process with Job status")
	f.Data.Dictionary.createfromdatatable("dJobStatus","dtAll2","JS","JobStatus")
	f.Data.Dictionary.SetDefaultReturn("dJobStatus","")
	f.Data.DataTable.FillFromDictionary("dtAllO","dJobStatus","JS","JobStatus")
	f.Data.Dictionary.Close("dJobStatus")
	
	'Set row ID for dtAllM and dtAllO
	gui.FrmMaster.prgBar.Value(32)
	gui.FrmMaster.lblDateUpdated.Caption("Set Row IDs")
	f.Intrinsic.Control.CallSub(setRowID)
	
	'Remove columns
	gui.FrmMaster.prgBar.Value(33)
	gui.FrmMaster.lblDateUpdated.Caption("Remove columns")
	
	'Remove unnecessary columns
	f.Data.DataTable.RemoveColumn("dtAll2","TODAYS_DATE")
	f.Data.DataTable.RemoveColumn("dtAll2","DATE_DUE_NEW")
	f.Data.DataTable.RemoveColumn("dtAll2","REMAINING_HRS")
	f.Data.DataTable.RemoveColumn("dtAll2","TOT_HRS_REM_NO_FLOAT")
	
	'Starting building the children
	f.Intrinsic.Control.If(v.DataTable.dtChild.Exists)
		f.Data.DataTable.Close("dtChild")
	f.Intrinsic.Control.EndIf
	
	f.Intrinsic.Control.If(v.DataTable.dtChildLabr.Exists)
		f.Data.DataTable.Close("dtChildLabr")
	f.Intrinsic.Control.EndIf
	
	f.Intrinsic.Control.If(v.DataTable.dtChildOuts.Exists)
		f.Data.DataTable.Close("dtChildOuts")
	f.Intrinsic.Control.EndIf
	
	'Materials
	gui.FrmMaster.prgBar.Value(34)
	gui.FrmMaster.lblDateUpdated.Caption("Creating Material Relation for Jobs")
	f.Intrinsic.Control.if(v.Args.salesorder.Trim,=,"")
	f.Intrinsic.Control.AndIf(v.Args.Customer.Trim,=,"")
		v.Local.sSQL.Set("SELECT DISTINCT CONCAT(A.JOB,A.SUFFIX) AS 'JS', CONCAT(A.JOB,A.SUFFIX) AS JBSF,CONCAT(CONCAT(A.JOB,A.SUFFIX),A.SEQ) AS JSS, rtrim(IF(INV_LXR.DISPLAY_PART is null, SUBSTRING(A.PART, 1, 20), INV_LXR.DISPLAY_PART)) AS 'PART', A.JOB AS JOB1,A.SUFFIX AS SFX1,A.SEQ AS SEQ1,COALESCE(A.PART,'') AS PART1,'' As DISPLAY_PART1,C.LOCATION AS LOCATION1,A.DESCRIPTION AS DESCR,E.VENDOR,E.PURCHASE_ORDER,LEFT(E.RECORD_NO,3) AS LINE,IF(E.DATE_DUE_LINE = '1900-1-1',NULL,E.DATE_DUE_LINE) AS DATE_DUE_LINE,D.AMT_COST,B.PCSTOPROD,B.PCSCOMPL, (B.PCSTOPROD - B.PCSCOMPL) AS PCSREMAIN,IF(D.QTY_ONHAND IS NULL,'0.0000',D.QTY_ONHAND) AS QTY_ONHAND,IF(D.QTY_ONORDER_PO IS NULL,'0.0000',D.QTY_ONORDER_PO) AS QTY_ONORDER_PO,IF(D.QTY_ONORDER_WO IS NULL,'0.0000',D.QTY_ONORDER_WO) AS QTY_ONORDER_WO,IF(D.QTY_REQUIRED IS NULL,'0.0000',D.QTY_REQUIRED) AS QTY_REQUIRED FROM JOB_OPERATIONS A LEFT JOIN INV_LXR ON A.PART = INV_LXR.GSS_PART LEFT JOIN APSV3_JBLINES B ON JSS = B.JSS  LEFT JOIN V_JOB_HEADER C ON A.JOB = C.JOB AND A.SUFFIX = C.SUFFIX LEFT JOIN INVENTORY_MSTR D ON A.PART = D.PART AND C.LOCATION = D.LOCATION LEFT JOIN V_PO_LINES E ON A.JOB = E.JOB AND A.SUFFIX = E.SUFFIX AND A.SEQ = E.SEQUENCE WHERE A.LMO = 'M' AND A.SEQ NOT IN ('995000','998000') AND  C.DATE_CLOSED='1900-01-01' AND LEFT(A.JOB,1)<>'Z' ORDER BY SEQ1")
	f.Intrinsic.Control.elseIf(v.Args.SalesOrder.Trim,=,"")
		f.Intrinsic.String.Build("SELECT DISTINCT CONCAT(A.JOB,A.SUFFIX) AS 'JS', CONCAT(A.JOB,A.SUFFIX) AS JBSF,CONCAT(CONCAT(A.JOB,A.SUFFIX),A.SEQ) AS JSS, rtrim(IF(INV_LXR.DISPLAY_PART is null, SUBSTRING(A.PART, 1, 20), INV_LXR.DISPLAY_PART)) AS 'PART', A.JOB AS JOB1,A.SUFFIX AS SFX1,A.SEQ AS SEQ1,COALESCE(A.PART,'') AS PART1,'' As DISPLAY_PART1,C.LOCATION AS LOCATION1,A.DESCRIPTION AS DESCR,E.VENDOR,E.PURCHASE_ORDER,LEFT(E.RECORD_NO,3) AS LINE,IF(E.DATE_DUE_LINE = '1900-1-1',NULL,E.DATE_DUE_LINE) AS DATE_DUE_LINE,D.AMT_COST,B.PCSTOPROD,B.PCSCOMPL,(B.PCSTOPROD - B.PCSCOMPL) AS PCSREMAIN,IF(D.QTY_ONHAND IS NULL,'0.0000',D.QTY_ONHAND) AS QTY_ONHAND,IF(D.QTY_ONORDER_PO IS NULL,'0.0000',D.QTY_ONORDER_PO) AS QTY_ONORDER_PO,IF(D.QTY_ONORDER_WO IS NULL,'0.0000',D.QTY_ONORDER_WO) AS QTY_ONORDER_WO,IF(D.QTY_REQUIRED IS NULL,'0.0000',D.QTY_REQUIRED) AS QTY_REQUIRED FROM JOB_OPERATIONS A LEFT JOIN INV_LXR ON A.PART = INV_LXR.GSS_PART LEFT JOIN APSV3_JBLINES B ON JSS = B.JSS  LEFT JOIN V_JOB_HEADER C ON A.JOB = C.JOB AND A.SUFFIX = C.SUFFIX LEFT JOIN INVENTORY_MSTR D ON A.PART = D.PART AND C.LOCATION = D.LOCATION LEFT JOIN V_PO_LINES E ON A.JOB = E.JOB AND A.SUFFIX = E.SUFFIX AND A.SEQ = E.SEQUENCE WHERE A.LMO = 'M' AND A.SEQ NOT IN ('995000','998000') AND C.DATE_CLOSED='1900-01-01' AND LEFT(A.JOB,1)<>'Z' AND CUSTOMER='{0}'  ORDER BY SEQ1",V.Args.Customer,v.Local.ssql)
	f.Intrinsic.Control.Else
		f.Intrinsic.String.Build("SELECT DISTINCT CONCAT(A.JOB,A.SUFFIX) AS 'JS', CONCAT(A.JOB,A.SUFFIX) AS JBSF,CONCAT(CONCAT(A.JOB,A.SUFFIX),A.SEQ) AS JSS, rtrim(IF(INV_LXR.DISPLAY_PART is null, SUBSTRING(A.PART, 1, 20), INV_LXR.DISPLAY_PART)) AS 'PART', A.JOB AS JOB1,A.SUFFIX AS SFX1,A.SEQ AS SEQ1,COALESCE(A.PART,'') AS PART1,'' As DISPLAY_PART1,C.LOCATION AS LOCATION1,A.DESCRIPTION AS DESCR,E.VENDOR,E.PURCHASE_ORDER,LEFT(E.RECORD_NO,3) AS LINE,IF(E.DATE_DUE_LINE = '1900-1-1',NULL,E.DATE_DUE_LINE) AS DATE_DUE_LINE,D.AMT_COST,B.PCSTOPROD,B.PCSCOMPL,(B.PCSTOPROD - B.PCSCOMPL) AS PCSREMAIN,IF(D.QTY_ONHAND IS NULL,'0.0000',D.QTY_ONHAND) AS QTY_ONHAND,IF(D.QTY_ONORDER_PO IS NULL,'0.0000',D.QTY_ONORDER_PO) AS QTY_ONORDER_PO,IF(D.QTY_ONORDER_WO IS NULL,'0.0000',D.QTY_ONORDER_WO) AS QTY_ONORDER_WO,IF(D.QTY_REQUIRED IS NULL,'0.0000',D.QTY_REQUIRED) AS QTY_REQUIRED FROM JOB_OPERATIONS A LEFT JOIN INV_LXR ON A.PART = INV_LXR.GSS_PART LEFT JOIN APSV3_JBLINES B ON JSS = B.JSS  LEFT JOIN V_JOB_HEADER C ON A.JOB = C.JOB AND A.SUFFIX = C.SUFFIX LEFT JOIN INVENTORY_MSTR D ON A.PART = D.PART AND C.LOCATION = D.LOCATION LEFT JOIN V_PO_LINES E ON A.JOB = E.JOB AND A.SUFFIX = E.SUFFIX AND A.SEQ = E.SEQUENCE WHERE A.LMO = 'M' AND A.SEQ NOT IN ('995000','998000') AND C.DATE_CLOSED='1900-01-01' AND LEFT(A.JOB,1)<>'Z' AND C.CUSTOMER='{0}' AND C.SALES_ORDER='{1}' ORDER BY SEQ1",V.Args.Customer,V.Args.SalesOrder,v.Local.ssql)
	f.Intrinsic.Control.EndIf	
	f.Intrinsic.Control.CallSub(cleanQuery,"Active",v.Local.bActive,"Query",v.Local.sSql)
	f.Intrinsic.Variable.ArgToVar("rSQL",v.Local.sSql)
	f.Data.DataTable.CreateFromSQL("dtChild","CON",v.Local.sSQL,true)
	
	'Labour
	gui.FrmMaster.prgBar.Value(35)
	gui.FrmMaster.lblDateUpdated.Caption("Creating Labour Relation for Jobs")
	f.Intrinsic.Control.if(v.Args.salesorder.Trim,=,"")
	f.Intrinsic.Control.AndIf(v.Args.Customer.Trim,=,"")
		v.Local.sSQL.Set("SELECT DISTINCT CONCAT(A.JOB,A.SUFFIX) AS 'JS', CONCAT(A.JOB,A.SUFFIX) AS JBSF,CONCAT(CONCAT(A.JOB,A.SUFFIX),A.SEQ) AS JSS,A.JOB,A.SUFFIX,A.SEQ,B.SEQRES,B.DESCR,B.STARTDATE,B.DUEDATE,B.COMPLDATE, A.CODE_SORT_OPER,B.SPM,B.OVERLAP,B.NOMACH,B.HOURSORIG+B.INITSU AS EST_HRS, B.FLOAT, B.HOURSAPPL AS ACT_HRS,(B.HOURSORIG+B.INITSU)-B.HoursAppl AS REM_HRS, IF( ifnull(Compldate,'1900-01-01')='1900-01-01',(((B.HOURSORIG+B.INITSU) * (1+(1-B.SPM))) - (If(B.HoursAppl > (B.HOURSORIG+B.INITSU),(B.HOURSORIG+B.INITSU),B.HoursAppl)) + Float),0) as TotHrsRem,  B.PCSTOPROD AS ORDER_QTY,B.PCSCOMPL AS COMPL_QTY,B.PCSREMAIN AS PCS_REM FROM JOB_OPERATIONS A LEFT JOIN APSV3_JBLINES B ON JSS = B.JSS WHERE A.LMO = 'L' AND LEFT(A.JOB,1)<>'Z'   AND A.SEQ NOT IN ('996000','998500') AND JBSF IN (SELECT CONCAT(JOB,SUFFIX) AS JBSFX FROM V_JOB_HEADER WHERE DATE_CLOSED = '1900-1-1') ORDER BY A.JOB,A.SUFFIX,A.SEQ;")
	f.Intrinsic.Control.elseIf(v.Args.SalesOrder.Trim,=,"")
		f.Intrinsic.String.Build("SELECT DISTINCT CONCAT(A.JOB,A.SUFFIX) AS 'JS', CONCAT(A.JOB,A.SUFFIX) AS JBSF,CONCAT(CONCAT(A.JOB,A.SUFFIX),A.SEQ) AS JSS,A.JOB,A.SUFFIX,A.SEQ,B.SEQRES,B.DESCR,B.STARTDATE,B.DUEDATE,B.COMPLDATE, A.CODE_SORT_OPER,B.SPM,B.OVERLAP,B.NOMACH,B.HOURSORIG+B.INITSU AS EST_HRS, B.FLOAT, B.HOURSAPPL AS ACT_HRS,(B.HOURSORIG+B.INITSU)-B.HoursAppl AS REM_HRS, IF( ifnull(Compldate,'1900-01-01')='1900-01-01',(((B.HOURSORIG+B.INITSU) * (1+(1-B.SPM))) - (If(B.HoursAppl > (B.HOURSORIG+B.INITSU),(B.HOURSORIG+B.INITSU),B.HoursAppl)) + Float),0) as TotHrsRem, B.PCSTOPROD AS ORDER_QTY,B.PCSCOMPL AS COMPL_QTY,B.PCSREMAIN AS PCS_REM FROM JOB_OPERATIONS A LEFT JOIN APSV3_JBLINES B ON JSS = B.JSS WHERE A.LMO = 'L' AND LEFT(A.JOB,1)<>'Z'   AND A.SEQ NOT IN ('996000','998500') AND JBSF IN (SELECT CONCAT(JOB,SUFFIX) AS JBSFX FROM V_JOB_HEADER WHERE  CUSTOMER='{0}' AND DATE_CLOSED = '1900-1-1') ORDER BY A.JOB,A.SUFFIX,A.SEQ;",v.Args.Customer.Trim,v.Local.ssql)
	f.Intrinsic.Control.Else
		f.Intrinsic.String.Build("SELECT DISTINCT CONCAT(A.JOB,A.SUFFIX) AS 'JS', CONCAT(A.JOB,A.SUFFIX) AS JBSF,CONCAT(CONCAT(A.JOB,A.SUFFIX),A.SEQ) AS JSS,A.JOB,A.SUFFIX,A.SEQ,B.SEQRES,B.DESCR,B.STARTDATE,B.DUEDATE,B.COMPLDATE, A.CODE_SORT_OPER,B.SPM,B.OVERLAP,B.NOMACH,B.HOURSORIG+B.INITSU AS EST_HRS, B.FLOAT, B.HOURSAPPL AS ACT_HRS,(B.HOURSORIG+B.INITSU)-B.HoursAppl AS REM_HRS, IF( ifnull(Compldate,'1900-01-01')='1900-01-01',(((B.HOURSORIG+B.INITSU) * (1+(1-B.SPM))) - (If(B.HoursAppl > (B.HOURSORIG+B.INITSU),(B.HOURSORIG+B.INITSU),B.HoursAppl)) + Float),0) as TotHrsRem, B.PCSTOPROD AS ORDER_QTY,B.PCSCOMPL AS COMPL_QTY,B.PCSREMAIN AS PCS_REM FROM JOB_OPERATIONS A LEFT JOIN APSV3_JBLINES B ON JSS = B.JSS WHERE A.LMO = 'L' AND LEFT(A.JOB,1)<>'Z'   AND A.SEQ NOT IN ('996000','998500') AND JBSF IN (SELECT CONCAT(JOB,SUFFIX) AS JBSFX FROM V_JOB_HEADER WHERE  CUSTOMER='{0}' AND SALES_ORDER='{1}' AND DATE_CLOSED = '1900-1-1') ORDER BY A.JOB,A.SUFFIX,A.SEQ;",v.Args.Customer.Trim,v.Args.SalesOrder,v.Local.ssql)
	f.Intrinsic.Control.EndIf	
	f.Intrinsic.Control.CallSub(cleanQuery,"Active",v.Local.bActive,"Query",v.Local.sSql)
	f.Intrinsic.Variable.ArgToVar("rSQL",v.Local.sSql)
	f.Data.DataTable.CreateFromSQL("dtChildLabr","CON",v.Local.sSQL,true)
	
	'Outside
	gui.FrmMaster.prgBar.Value(36)
	gui.FrmMaster.lblDateUpdated.Caption("Creating Outside Relation for Jobs")
	f.Intrinsic.Control.if(v.Args.salesorder.Trim,=,"")
	f.Intrinsic.Control.AndIf(v.Args.Customer.Trim,=,"")
		V.Local.sSQL.SET("SELECT DISTINCT CONCAT(A.JOB,A.SUFFIX) AS 'JS', CONCAT(A.JOB,A.SUFFIX) AS JBSF,CONCAT(CONCAT(A.JOB,A.SUFFIX),A.SEQ) AS JSS,A.JOB,A.SUFFIX,A.SEQ,C.NAME_VENDOR,B.DESCR,B.STARTDATE,B.DUEDATE,B.COMPLDATE,D.PURCHASE_ORDER AS PURCHASE_ORDER2,LEFT(D.RECORD_NO,3) AS LINE2 FROM JOB_OPERATIONS A LEFT JOIN APSV3_JBLINES B ON JSS = B.JSS LEFT JOIN V_VENDOR_MASTER C ON B.OPCODE = C.VENDOR LEFT JOIN V_PO_LINES D ON A.JOB = D.JOB AND A.SUFFIX = D.SUFFIX AND A.SEQ = D.SEQUENCE LEFT JOIN V_JOB_HEADER E ON E.JOB = A.JOB AND E.SUFFIX = A.SUFFIX WHERE A.LMO = 'O' AND LEFT(A.JOB,1)<>'Z'  AND A.SEQ <> '997000' AND E.DATE_CLOSED='1900-01-01' ORDER BY A.JOB,A.SUFFIX,A.SEQ;")
	f.Intrinsic.Control.elseIf(v.Args.SalesOrder.Trim,=,"")
		f.Intrinsic.String.Build("SELECT DISTINCT CONCAT(A.JOB,A.SUFFIX) AS 'JS', CONCAT(A.JOB,A.SUFFIX) AS JBSF,CONCAT(CONCAT(A.JOB,A.SUFFIX),A.SEQ) AS JSS,A.JOB,A.SUFFIX,A.SEQ,C.NAME_VENDOR,B.DESCR,B.STARTDATE,B.DUEDATE,B.COMPLDATE,D.PURCHASE_ORDER AS PURCHASE_ORDER2,LEFT(D.RECORD_NO,3) AS LINE2 FROM JOB_OPERATIONS A LEFT JOIN APSV3_JBLINES B ON JSS = B.JSS LEFT JOIN V_VENDOR_MASTER C ON B.OPCODE = C.VENDOR LEFT JOIN V_PO_LINES D ON A.JOB = D.JOB AND A.SUFFIX = D.SUFFIX AND A.SEQ = D.SEQUENCE  LEFT JOIN V_JOB_HEADER E ON E.JOB = A.JOB AND E.SUFFIX = A.SUFFIX WHERE  A.LMO = 'O' AND LEFT(A.JOB,1)<>'Z' AND A.SEQ <> '997000'  AND E.DATE_CLOSED='1900-01-01' AND E.CUSTOMER='{0}' ORDER BY A.JOB,A.SUFFIX,A.SEQ;",v.Args.Customer,v.Local.ssql)
	f.Intrinsic.Control.Else
		f.Intrinsic.String.Build("SELECT DISTINCT CONCAT(A.JOB,A.SUFFIX) AS 'JS', CONCAT(A.JOB,A.SUFFIX) AS JBSF,CONCAT(CONCAT(A.JOB,A.SUFFIX),A.SEQ) AS JSS,A.JOB,A.SUFFIX,A.SEQ,C.NAME_VENDOR,B.DESCR,B.STARTDATE,B.DUEDATE,B.COMPLDATE,D.PURCHASE_ORDER AS PURCHASE_ORDER2,LEFT(D.RECORD_NO,3) AS LINE2 FROM JOB_OPERATIONS A LEFT JOIN APSV3_JBLINES B ON JSS = B.JSS LEFT JOIN V_VENDOR_MASTER C ON B.OPCODE = C.VENDOR LEFT JOIN V_PO_LINES D ON A.JOB = D.JOB AND A.SUFFIX = D.SUFFIX AND A.SEQ = D.SEQUENCE  LEFT JOIN V_JOB_HEADER E ON E.JOB = A.JOB AND E.SUFFIX = A.SUFFIX WHERE A.LMO = 'O' AND LEFT(A.JOB,1)<>'Z' AND A.SEQ <> '997000' AND E.DATE_CLOSED='1900-01-01' AND E.CUSTOMER='{0}' AND SALES_ORDER='{1}' ORDER BY A.JOB,A.SUFFIX,A.SEQ;",v.Args.Customer.Trim,v.Args.SalesOrder,v.Local.ssql)
	f.Intrinsic.Control.EndIf
	f.Intrinsic.Control.CallSub(cleanQuery,"Active",v.Local.bActive,"Query",v.Local.sSql)
	f.Intrinsic.Variable.ArgToVar("rSQL",v.Local.sSql)
	f.Data.DataTable.CreateFromSQL("dtChildOuts","CON",v.Local.sSQL,true)
	
	'Save all to XML
	v.Local.sFileXML.Declare
	v.Local.sfilematl.Declare
	V.Local.sfilelabr.Declare
	v.Local.sfileouts.Declare
	v.Local.sfilemulti.Declare
 	f.Intrinsic.String.Concat(v.Caller.FilesDir,"\",v.Caller.CompanyCode,"_5657_ViewMatl.xml",v.Local.sfilematl)
 	f.Intrinsic.String.Concat(v.Caller.FilesDir,"\",v.Caller.CompanyCode,"_5657_ViewLabr.xml",v.Local.sfilelabr)
 	f.Intrinsic.String.Concat(v.Caller.FilesDir,"\",v.Caller.CompanyCode,"_5657_ViewOuts.xml",v.Local.sfileouts)
 	f.Intrinsic.String.Concat(v.Caller.FilesDir,"\",v.Caller.CompanyCode,"_5657_ViewMulti.xml",v.Local.sfilemulti)
	f.Data.DataTable.SaveToXML("dtChild",0,true,v.Local.sfileMatl)
	f.Data.DataTable.SaveToXML("dtChildLabr",0,true,v.Local.sfilelabr)
	f.Data.DataTable.SaveToXML("dtChildOuts",0,true,v.Local.sfileouts)
	f.Intrinsic.String.Concat(v.Caller.FilesDir,"\5657dtoper.xml",v.Local.sfilexml)
	f.Data.DataTable.SaveToXML("dtOper",0,true,v.Local.sfilexml)
	f.Intrinsic.String.Concat(v.Caller.FilesDir,"\5657dtall2.xml",v.Local.sfilexml)
	f.Data.DataTable.SaveToXML("dtAll2",0,true,v.Local.sfilexml)
	f.Intrinsic.String.Concat(v.Caller.FilesDir,"\5657dtAllM.xml",v.Local.sFileXML)
	f.Data.DataTable.SaveToXML("dtAllM",0,true,v.Local.sFileXML)
	f.Intrinsic.String.Concat(v.Caller.FilesDir,"\5657dtAllO.xml",v.Local.sFileXML)
	f.Data.DataTable.SaveToXML("dtAllO",0,true,v.Local.sFileXML)
	f.Intrinsic.String.Concat(v.Caller.FilesDir,"\5657dtChild.xml",v.Local.sFileXML)
	f.Data.DataTable.SaveToXML("dtChild",0,true,v.Local.sFileXML)
	f.Intrinsic.String.Concat(v.Caller.FilesDir,"\5657dtChildLabr.xml",v.Local.sFileXML)
	f.Data.DataTable.SaveToXML("dtChildLabr",0,true,v.Local.sFileXML)
	f.Intrinsic.String.Concat(v.Caller.FilesDir,"\5657dtChildOuts.xml",v.Local.sFileXML)
	f.Data.DataTable.SaveToXML("dtChildOuts",0,true,v.Local.sFileXML)
		
	'Load from XML, creating new data table, add relation
	'f.Intrinsic.Control.Try
		f.Data.DataTable.CreateFromXML("dtAll2$dtChild",v.Local.sfileMatl,true)
		F.Data.DataView.Create("dtAll2$dtChild","dvMatl")
		F.Data.DataTable.AddRelation("dtAll2","JS","dtAll2$dtChild","JS","Material")
	'f.Intrinsic.Control.Catch
	'f.Intrinsic.Control.EndTry
	
	'f.Intrinsic.Control.Try
		f.Data.DataTable.CreateFromXML("dtAll2$dtChildLabr",v.Local.sfilelabr,true)
		F.Data.DataView.Create("dtAll2$dtChildLabr","dvLabr")
		F.Data.DataTable.AddRelation("dtAll2","JS","dtall2$dtChildLabr","JS","Labour")
	'f.Intrinsic.Control.Catch
	'f.Intrinsic.Control.EndTry
	
	'f.Intrinsic.Control.Try
		f.Data.DataTable.CreateFromXML("dtAll2$dtChildOuts",v.Local.sfileouts,true)
		F.Data.DataView.Create("dtAll2$dtChildOuts","dvOuts")
		F.Data.DataTable.AddRelation("dtAll2","JS","dtall2$dtChildOuts","JS","Outside")
	'f.Intrinsic.Control.Catch
	'f.Intrinsic.Control.EndTry
	
	'Create a Dataview to filter days late
	f.Data.DataView.Create("dtAll2","dvLate",22,"DAYS_LATE > 0","WOLabel ASC")
	
	
	'If custom 6196 program installed
	f.Intrinsic.Control.If(v.Global.bCustomMultiPartTrack)
		f.Intrinsic.Control.If(v.DataTable.dtChildMulti.Exists)
			f.Data.DataTable.Close("dtChildMulti")
		f.Intrinsic.Control.EndIf
		f.Data.DataTable.CreateFromSQL("dtChildMulti","con","SELECT a.* FROM GAB_6196_MULTI_PART_TRACK A LEFT JOIN V_JOB_HEADER B ON A.JOB = B.JOB AND A.SUFFIX=B.SUFFIX WHERE B.DATE_CLOSED='1900-01-01'",true)
		F.Data.DataTable.AddColumn("dtChildMulti","JobSteps","string")
		F.Data.DataTable.AddColumn("dtChildMulti","JS","string")
		f.Intrinsic.Control.For(v.Local.iCnt,0,v.DataTable.dtChildMulti.RowCount--,1)
			f.Intrinsic.Control.For(v.Local.i2,1,15,1)	
				f.Intrinsic.Control.If(v.DataTable.dtChildMulti(v.Local.iCnt).LABOUR_[v.Local.i2]_WC!FIELDVALTRIM,<>,"")	
					f.Intrinsic.Control.If(v.DataTable.dtChildMulti(v.Local.iCnt).LABOUR_[v.Local.i2]!FIELDVAL)
						f.Intrinsic.String.Concat(v.Local.sJobSteps,"~",v.DataTable.dtChildMulti(v.Local.iCnt).LABOUR_[v.Local.i2]_WC!FIELDVALTRIM," / ",v.local.sJobSteps)
					f.Intrinsic.control.Else
						f.Intrinsic.String.Concat(v.Local.sJobSteps,"",v.DataTable.dtChildMulti(v.Local.iCnt).LABOUR_[v.Local.i2]_WC!FIELDVALTRIM," / ",v.local.sJobSteps)
					f.Intrinsic.Control.EndIf
				f.Intrinsic.Control.EndIf
			f.Intrinsic.Control.Next(v.Local.i2)
			f.Intrinsic.String.Concat(v.DataTable.dtChildMulti(v.Local.iCnt).JOB!Fieldvaltrim,v.DataTable.dtChildMulti(v.Local.iCnt).Suffix!Fieldvaltrim,v.Local.sJS)
			f.Intrinsic.String.Replace(v.Local.sJobSteps,"~",v.Local.sMark,v.Local.sJobSteps)
			f.Intrinsic.String.Len(v.Local.sJobSteps,v.Local.lret)
			f.Intrinsic.Math.Sub(v.Local.lret,3,v.Local.lret)
			f.Intrinsic.String.left(v.Local.sJobSteps,v.Local.lret,v.Local.sJobSteps)
			f.Data.DataTable.SetValue("dtChildMulti",v.Local.iCnt,"JS",v.Local.sJS,"JobSteps",v.Local.sJobSteps)
			v.local.sJobSteps.Set("")
		f.Intrinsic.Control.Next(v.local.iCnt)
		
		f.Data.DataTable.SaveToXML("dtChildMulti",0,true,v.Local.sfilemulti)
		
		f.Intrinsic.String.Concat(v.Caller.FilesDir,"\5657dtChildOuts.xml",v.Local.sFileXML)
		f.Data.DataTable.SaveToXML("dtChildMulti",0,true,v.Local.sFileXML)
		
		f.Data.DataTable.CreateFromXML("dtAll2$dtChildMulti",v.Local.sFileMulti,true)
		F.Data.DataView.Create("dtAll2$dtChildMulti","dvMulti")
		f.Data.DataTable.AddRelation("dtAll2","JS","dtAll2$dtChildMulti","JS","Multiple Parts")
	f.Intrinsic.Control.EndIf
	
	'Remove unecessary column
	f.Data.DataTable.RemoveColumn("dtAllM","SALESORDERLINE")
	f.Data.DataTable.RemoveColumn("dtAllO","SALESORDERLINE")
	f.Data.DataTable.RemoveColumn("dtAll2","SALESORDERLINE")
	f.Data.DataTable.RemoveColumn("dtOper","SALESORDERLINE")
	
	
F.Intrinsic.Control.Catch
	f.Intrinsic.UI.Msgbox(v.Ambient.ErrorDescription)
	F.ODBC.Connection!CON.Close
	F.Intrinsic.Control.End
F.Intrinsic.Control.EndTry
Program.Sub.ProgramData.End

Program.Sub.Process_JobSteps.Start
F.Intrinsic.Control.Try
	V.Local.iCnt.Declare
	V.Local.sRet.Declare
	V.Local.sJob.Declare
	V.Local.sSuffix.Declare
	v.Local.sJobSteps.Declare
	v.Local.sMark.Declare
	v.Local.sSeq.Declare
	V.Local.sStep.Declare
	V.Local.sJS.Declare
	V.Local.sXML.Declare	
	v.Local.sSearch.Declare
	V.Local.sCMarkFile.Declare
	v.Local.x.Declare(long)
	v.Local.lret.Declare	
	f.Intrinsic.String.Concat(v.Caller.GasDir,"\GAB_5657_COMPLETION.txt",v.Local.sCMarkFile)
	f.Intrinsic.File.File2String(v.Local.sCMarkFile,3,v.Local.sMark)
	
	f.Intrinsic.Control.For(v.Local.iCnt,0,v.DataTable.dtAll2.RowCount--,1)			
		'Job Step
		V.Local.sJob.Set(V.DataTable.dtAll2(V.Local.iCnt).JOB!FieldVal)
		V.Local.sSuffix.Set(V.DataTable.dtAll2(V.Local.iCnt).SUFFIX!FieldVal)
		f.Intrinsic.String.Build("JOB='{0}' AND SUFFIX='{1}'",v.Local.sJob,v.Local.sSuffix,v.Local.sSearch)
		f.Data.DataTable.Select("JobOp",v.Local.sSearch,v.local.sret)
		f.Intrinsic.Control.If(v.Local.sret.Trim,<>,"***NORETURN***")
			F.Intrinsic.String.Split(v.Local.sRet,"*!*",v.Local.sRet)
			f.Intrinsic.Control.For(v.local.x,0,v.Local.sRet.UBound,1)
				v.Local.sStep.Set(v.DataTable.JobOp(v.Local.sRet(v.Local.x)).JOBSTEPS!FIELDVALTRIM)
				
				f.Intrinsic.Control.If(v.Local.sStep.Trim,=,"TASK")
					v.Local.sStep.Set(v.DataTable.jobOp(v.Local.sRet(v.Local.x)).DESCRIPTION!FIELDVALTRIM)
				f.Intrinsic.Control.EndIf
				
				f.Intrinsic.Control.If(v.Local.sStep.Trim,=,"~TASK")
					f.Intrinsic.String.Concat("~",v.DataTable.jobOp(v.Local.sRet(v.Local.x)).DESCRIPTION!FIELDVALTRIM,v.Local.sStep)
				f.Intrinsic.Control.EndIf
				
				f.Intrinsic.String.Concat(v.Local.sJobsteps,v.Local.sStep," / ",v.Local.sJobSteps)
			f.Intrinsic.Control.Next(v.Local.x)
			
			F.Intrinsic.String.InstrRev(V.Local.sJobSteps,"/",V.Local.lret)
			f.Intrinsic.Math.Sub(v.Local.lret,1,v.Local.lret)
			f.Intrinsic.String.Left(v.Local.sJobSteps,v.Local.lret,v.Local.sJobSteps)
			f.Intrinsic.String.Replace(v.Local.sJobSteps,"~",v.Local.sMark,v.Local.sJobSteps)
		f.Intrinsic.Control.Else
			v.Local.sJobSteps.Set("")
		f.Intrinsic.Control.EndIf
		

		f.Data.DataTable.SetValue("dtAll2",v.Local.iCnt,"JobSteps",v.Local.sJobSteps)
		v.Local.sJobSteps.Set("")

	f.Intrinsic.Control.Next(v.Local.iCnt)	


F.Intrinsic.Control.Catch
	f.Intrinsic.UI.Msgbox(v.Ambient.ErrorDescription)
	F.ODBC.Connection!CON.Close
	F.Intrinsic.Control.End
F.Intrinsic.Control.EndTry
Program.Sub.Process_JobSteps.End

Program.Sub.setRowID.Start
f.Intrinsic.Control.Try
	v.Local.i.Declare
	v.Local.sPc.Declare
	v.Local.sret.Declare
	v.Local.sSelect.Declare
	
	f.Intrinsic.Control.For(v.Local.i,0,v.DataTable.dtAllM.RowCount--,1)
		f.Data.DataTable.SetValue("dtAllM",v.Local.i,"MyRowID",V.Local.I)
		
		'Cleanup pcs to produce, set to 0 if blank
		v.Local.sPc.Set(V.DataTable.dtAllM(v.Local.i).PCSTOPROD!fieldvaltrim)
		f.Intrinsic.Control.If(v.Local.sPc,=,"")
			v.Local.sPc.Set(0)
		f.Intrinsic.Control.EndIf
		
		F.Intrinsic.Control.If(V.DataTable.dtAllM(v.Local.i).PURCHASE_ORDER!FIELDVALTRIM,<>,"")
			f.Intrinsic.String.Build("POANDLINE='{0}'",V.DataTable.dtAllM(v.Local.i).POANDLINE!FIELDVALTRIM,v.Local.sSelect)
			f.Data.DataTable.Select("dtPOSQ",v.Local.sSelect,v.Local.sret)
			f.Intrinsic.Control.If(v.Local.sret.Trim,<>,"***NORETURN***")
				f.Data.DataTable.SetValue("dtAllM",v.Local.i,"TEXT",v.Datatable.dtPOSQ(v.Local.sret).TEXT!FIELDVALTRIM)
			f.Intrinsic.Control.EndIf
		F.Intrinsic.Control.EndIf
		
		'Simple logic check for the material management tab
		f.Intrinsic.Control.If(v.DataTable.dtAllM(v.Local.i).QTY_ONHAND!FIELDVAL,>=,V.local.sPc)
			f.Data.DataTable.SetValue("dtAllM",v.Local.i,"MaterialManage","In Stock")
		f.Intrinsic.Control.ElseIf(v.DataTable.dtAllM(v.Local.i).PURCHASE_ORDER!FIELDVALTRIM,<>,"")
			f.Data.DataTable.SetValue("dtAllM",v.Local.i,"MaterialManage","On Order")
		f.Intrinsic.Control.Else
			f.Data.DataTable.SetValue("dtAllM",v.Local.i,"MaterialManage","Out of Stock")
		f.Intrinsic.Control.EndIf
		
		f.Intrinsic.Control.If(v.DataTable.dtAllM(v.Local.i).COST!FIELDVAL,=,0)
			f.Data.DataTable.SetValue("dtAllM",v.Local.i,"Cost",v.DataTable.dtAllM(v.Local.i).BURDEN!FIELDVAL)
		f.Intrinsic.Control.EndIf
	f.Intrinsic.Control.Next(v.Local.i)
	
	f.Intrinsic.Control.For(v.Local.i,0,v.DataTable.dtAllO.RowCount--,1)
		f.Data.DataTable.SetValue("dtAllO",v.Local.i,"MyRowID",V.Local.I)
		f.Intrinsic.Control.If(v.DataTable.dtAllO(v.Local.i).COST!FIELDVAL,=,0)
			f.Data.DataTable.SetValue("dtAllO",v.Local.i,"Cost",v.DataTable.dtAllO(v.Local.i).BURDEN!FIELDVAL)
		f.Intrinsic.Control.EndIf
		
		F.Intrinsic.Control.If(V.DataTable.dtAllO(v.Local.i).PURCHASE_ORDER!FIELDVALTRIM,<>,"")
			f.Intrinsic.String.Build("POANDLINE='{0}'",V.DataTable.dtAllO(v.Local.i).POANDLINE!FIELDVALTRIM,v.Local.sSelect)
			f.Data.DataTable.Select("dtPOSQ",v.Local.sSelect,v.Local.sret)
			f.Intrinsic.Control.If(v.Local.sret.Trim,<>,"***NORETURN***")
				f.Data.DataTable.SetValue("dtAllO",v.Local.i,"TEXT",v.Datatable.dtPOSQ(v.Local.sret).TEXT!FIELDVALTRIM)
			f.Intrinsic.Control.EndIf
		F.Intrinsic.Control.EndIf
		
	f.Intrinsic.Control.Next(v.Local.i)

f.Intrinsic.Control.Catch
	f.Intrinsic.UI.Msgbox(v.Ambient.ErrorDescription)
	F.ODBC.Connection!CON.Close
	F.Intrinsic.Control.End
f.Intrinsic.Control.EndTry
Program.Sub.setRowID.End

Program.Sub.setOperData.Start
f.Intrinsic.Control.Try
	v.Local.i.Declare
	f.Intrinsic.Control.For(v.Local.i,0,v.DataTable.dtOperIds.RowCount--,1)
		F.Data.DataTable.SetValue("dtOper",v.DataTable.dtOperIds(v.Local.i).RowID!fieldval,v.Args.OperColumn.Trim,v.Args.OperValue)
	f.Intrinsic.Control.Next(v.Local.i)
f.Intrinsic.Control.Catch
	f.Intrinsic.UI.Msgbox(v.Ambient.ErrorDescription)
	F.ODBC.Connection!CON.Close
	F.Intrinsic.Control.End
f.Intrinsic.Control.EndTry
Program.Sub.setOperData.End

Program.Sub.setAllMData.Start
f.Intrinsic.Control.Try
	v.Local.i.Declare
	f.Intrinsic.Control.For(v.Local.i,0,v.DataTable.dtAllMIds.RowCount--,1)
		F.Intrinsic.Control.If(Variable.Datatable.dtAllMIds(Variable.Local.i).RowID!fieldval,<>,"***NORETURN***")
			F.Data.DataTable.SetValue("dtAllM",v.DataTable.dtAllMIds(v.Local.i).RowID!fieldval,v.Args.MatlColumn.Trim,v.Args.MatlValue)
		F.Intrinsic.Control.EndIf
	f.Intrinsic.Control.Next(v.Local.i)
f.Intrinsic.Control.Catch
	f.Intrinsic.UI.Msgbox(v.Ambient.ErrorDescription)
	F.ODBC.Connection!CON.Close
	F.Intrinsic.Control.End
f.Intrinsic.Control.EndTry
Program.Sub.setAllMData.End

Program.Sub.setAllOData.Start
f.Intrinsic.Control.Try
	v.Local.i.Declare
	f.Intrinsic.Control.For(v.Local.i,0,v.DataTable.dtAllOIds.RowCount--,1)
		F.Intrinsic.Control.If(Variable.Datatable.dtAllOIds(Variable.Local.i).RowID!fieldval,<>,"***NORETURN***")
			F.Data.DataTable.SetValue("dtAllO",v.DataTable.dtAllOIds(v.Local.i).RowID!fieldval,v.Args.OutsColumn.Trim,v.Args.OutsValue)
		F.Intrinsic.Control.EndIf
	f.Intrinsic.Control.Next(v.Local.i)
f.Intrinsic.Control.Catch
	f.Intrinsic.UI.Msgbox(v.Ambient.ErrorDescription)
	F.ODBC.Connection!CON.Close
	F.Intrinsic.Control.End
f.Intrinsic.Control.EndTry
Program.Sub.setAllOData.End

Program.Sub.BoostGen.Start
f.Intrinsic.Control.Try
	v.Local.sSQL.Declare(string)
	v.Local.sret.Declare(string)
	V.Local.sJob.Declare(string)
	v.Local.sSuf.Declare(string)
	v.Local.sSeq.Declare(string)
	v.Local.sDtD.Declare(String)
	v.Local.sPrt.Declare(string)
	v.Local.sJSS.Declare(string)
	v.Local.sMat.Declare(string)
	v.Local.sXML.Declare(string)
	V.Local.sMsg.Declare(string)
	v.Local.sRev.Declare(string)
	v.Local.sRtr.Declare(string)
	V.Local.sPart.Declare(string)
	V.Local.shold.Declare(string)
	v.Local.sPath.Declare(string)
	v.Local.sTime.Declare(string)
	v.Local.sSQL2.Declare(string)
	V.Local.sFileName.Declare(string)
	v.Local.sBoostID.Declare
	v.Local.fRet.Declare(float)
	v.Local.i.Declare(long)
	f.Intrinsic.String.Format(v.Ambient.Now,"YYMMDDHHNNSS",v.Local.sTime)
	f.Intrinsic.String.Concat("xmlDoc",v.Local.sTime,v.Local.sXML)
	
	' create the document
	F.global.xml.createDocument(v.local.sXML,False,True,False,False)
	F.global.xml.SetRoot(v.local.sXML,"PPSImport")
	F.Global.XML.CreateAttributeNode(v.local.sXML,"Version","1.1")
	F.Global.XML.SetAttributeToRoot(v.local.sXML,"Version")
	F.Intrinsic.String.Concat(V.Ambient.NewLine,V.Ambient.Tab,V.Local.shold)
	F.global.xml.appendNode(v.local.sXML,"PPSImport",V.Local.shold)
	F.Global.XML.AppendTextNode(v.local.sXML,"PPSImport",V.Ambient.NewLine)
	
	F.Global.XML.CreateElementNode(v.local.sXML,"ProductionOrders","")
	F.Global.XML.AppendNodeToRoot(v.local.sXML,"ProductionOrders")
	F.global.xml.appendNode(v.local.sXML,"ProductionOrders",V.Local.shold)
	F.Global.XML.AppendTextNode(v.local.sXML,"ProductionOrders",V.Ambient.NewLine)
	f.Intrinsic.Control.For(v.Local.i,0,v.DataTable.dt.RowCount--,1)
		'Check if work order created
		F.Intrinsic.Control.If(v.DataTable.dt(v.Local.i).JOB!FIELDVALTRIM,=,"")
			f.Intrinsic.String.Build("No work order found for sales order line {0}-{1}.  Skipping record.",v.DataTable.dt(v.Local.i).SALES_ORDER!FIELDVALTRIM,v.DataTable.dt(v.Local.i).SALES_ORDER_LINE!FIELDVALTRIM,v.Local.sMsg)
			f.Intrinsic.UI.Msgbox(v.Local.sMsg)
		f.Intrinsic.Control.else
	
			'Check for operation sequence
			f.Intrinsic.String.Build("SELECT SEQ FROM V_JOB_OPERATIONS WHERE JOB='{0}' AND SUFFIX='{1}' AND PART='PROJ'",v.DataTable.dt(v.Local.i).JOB!FIELDVALTRIM,v.DataTable.dt(v.Local.i).SUFFIX!FIELDVALTRIM,V.Local.SSQL)
			F.ODBC.Connection!CON.Executeandreturn(v.Local.sSQL,v.Local.sSeq)
			f.Intrinsic.Control.If(v.Local.sSeq.Trim,<>,"")
				' ======================== PRODUCTION ORDER
				'Grab the router number from QRE if it is the parent
				f.Intrinsic.Control.If(v.DataTable.dt(v.Local.i).SUFFIX!FIELDVALTRIM,=,"000")
					f.Intrinsic.string.Left(v.DataTable.dt(v.Local.i).PART!Fieldval,17,v.Local.spart)
					f.Intrinsic.String.Mid(v.DataTable.dt(v.Local.i).Part!fieldval,18,3,v.Local.srev)
					f.Intrinsic.String.Build("SELECT ROUTER FROM GAB_4486_QRE_HEAD WHERE CUST_PART='{0}' and CUST_REV='{1}'",v.Local.spart.Trim,v.Local.srev.Trim,v.Local.sSQL2)
					f.ODBC.Connection!conx.executeandreturn(v.Local.sSQL2,v.Local.sRtr)
					F.Intrinsic.String.Replace(v.Local.sRtr,"-","_",v.Local.sRtr)
				F.Intrinsic.Control.Else
					v.Local.sRtr.Set(v.DataTable.dt(v.Local.i).PART!FIELDVALTRIM)
				F.Intrinsic.Control.EndIf
				
				' create ProductionOrder node, with attribute
				f.Intrinsic.String.Concat(v.DataTable.dt(v.Local.i).JOB!FIELDVAL,"-",v.DataTable.dt(v.Local.i).SUFFIX!FIELDVALTRIM,"-",v.Local.sSeq,v.Local.sJSS)
				F.Global.XML.AppendTextNode(v.local.sXML,"ProductionOrder",V.Ambient.NewLine)
				F.Global.XML.CreateElementNode(v.local.sXML,"ProductionOrder","")
				F.Global.XML.CreateAttributeNode(v.local.sXML,"OrderNo",v.Local.sJSS)
				F.Global.XML.SetAttributeToNode(v.local.sXML,"ProductionOrder","OrderNo")
				F.Global.XML.DestroyNode(v.local.sXML,"OrderNo")
				F.global.xml.appendNode(v.local.sXML,"ProductionOrder",V.Local.shold)
				F.Global.XML.AppendNode(v.local.sXML,"ProductionOrders","ProductionOrder")
				F.Global.XML.AppendTextNode(v.local.sXML,"ProductionOrder",V.Ambient.NewLine)
				
				' Description
				F.Global.XML.CreateElementNode(v.local.sXML,"Description",v.DataTable.dt(v.Local.i).DESCRIPTION!FIELDVAL)
				F.Global.XML.AppendNode(v.local.sXML,"ProductionOrder","Description")
				F.global.xml.appendNode(v.local.sXML,"Description",V.Local.shold)
				F.Global.XML.DestroyNode(v.local.sXML,"Description")
				F.Global.XML.AppendTextNode(v.local.sXML,"ProductionOrder",V.Ambient.NewLine)
				
				' Barcode
				F.Global.XML.CreateElementNode(v.local.sXML,"Barcode","")
				F.Global.XML.AppendNode(v.local.sXML,"ProductionOrder","Barcode")
				F.global.xml.appendNode(v.local.sXML,"Barcode",V.Local.shold)
				F.Global.XML.DestroyNode(v.local.sXML,"Barcode")
				F.Global.XML.AppendTextNode(v.local.sXML,"ProductionOrder",V.Ambient.NewLine)
				
				' Sales Order
				F.Global.XML.CreateElementNode(v.local.sXML,"CustomerOrderNo",v.DataTable.dt(v.Local.i).SALES_ORDER!FIELDVAL)
				F.Global.XML.AppendNode(v.local.sXML,"ProductionOrder","CustomerOrderNo")
				F.global.xml.appendNode(v.local.sXML,"CustomerOrderNo",V.Local.shold)
				F.Global.XML.DestroyNode(v.local.sXML,"CustomerOrderNo")
				F.Global.XML.AppendTextNode(v.local.sXML,"ProductionOrder",V.Ambient.NewLine)
				
				' Customer PO
				F.Global.XML.CreateElementNode(v.local.sXML,"CustomerBookingNo",v.DataTable.dt(v.Local.i).JOB!FIELDVAL)
				F.Global.XML.AppendNode(v.local.sXML,"ProductionOrder","CustomerBookingNo")
				F.global.xml.appendNode(v.local.sXML,"CustomerBookingNo",V.Local.shold)
				F.Global.XML.DestroyNode(v.local.sXML,"CustomerBookingNo")
				F.Global.XML.AppendTextNode(v.local.sXML,"ProductionOrder",V.Ambient.NewLine)
				
				' Customer Name
				F.Global.XML.CreateElementNode(v.local.sXML,"CustomerName",v.DataTable.dt(v.Local.i).NAME_CUSTOMER!FIELDVALTRIM)
				F.Global.XML.AppendNode(v.local.sXML,"ProductionOrder","CustomerName")
				F.global.xml.appendNode(v.local.sXML,"CustomerName",V.Local.shold)
				F.Global.XML.DestroyNode(v.local.sXML,"CustomerName")
				F.Global.XML.AppendTextNode(v.local.sXML,"ProductionOrder",V.Ambient.NewLine)
				
				' Customer No
				F.Global.XML.CreateElementNode(v.local.sXML,"CustomerNo",v.DataTable.dt(v.Local.i).CUSTOMER!FIELDVALTRIM)
				F.Global.XML.AppendNode(v.local.sXML,"ProductionOrder","CustomerNo")
				F.global.xml.appendNode(v.local.sXML,"CustomerNo",V.Local.shold)
				F.Global.XML.DestroyNode(v.local.sXML,"CustomerNo")
				F.Global.XML.AppendTextNode(v.local.sXML,"ProductionOrder",V.Ambient.NewLine)
				
				' Part
				'This needs to be BOOST ID number
				f.Intrinsic.String.Replace(v.DataTable.dt(v.Local.i).BoostID!FIELDVALTRIM,"-","_",v.Local.sBoostID)
				F.Global.XML.CreateElementNode(v.local.sXML,"PartNo",v.Local.sBoostID)
				'F.Global.XML.CreateElementNode(v.local.sXML,"PartNo",v.Local.sRtr.Trim)
				F.Global.XML.AppendNode(v.local.sXML,"ProductionOrder","PartNo")
				F.global.xml.appendNode(v.local.sXML,"PartNo",V.Local.shold)
				F.Global.XML.DestroyNode(v.local.sXML,"PartNo")
				F.Global.XML.AppendTextNode(v.local.sXML,"ProductionOrder",V.Ambient.NewLine)
				
				' Part Description
				'Changed to be Part Number Value to overcome boost bug
				F.Global.XML.CreateElementNode(v.local.sXML,"PartDescription",v.DataTable.dt(v.Local.i).DESCRIPTION!FIELDVALTRIM)
				F.Global.XML.AppendNode(v.local.sXML,"ProductionOrder","PartDescription")
				F.global.xml.appendNode(v.local.sXML,"PartDescription",V.Local.shold)
				F.Global.XML.DestroyNode(v.local.sXML,"PartDescription")
				F.Global.XML.AppendTextNode(v.local.sXML,"ProductionOrder",V.Ambient.NewLine)
				
				' Note 2	
				F.Global.XML.CreateElementNode(v.local.sXML,"Note2","")
				F.Global.XML.AppendNode(v.local.sXML,"ProductionOrder","Note2")
				F.global.xml.appendNode(v.local.sXML,"Note2",V.Local.shold)
				F.Global.XML.DestroyNode(v.local.sXML,"Note2")
				F.Global.XML.AppendTextNode(v.local.sXML,"ProductionOrder",V.Ambient.NewLine)
				
				' DrawingNo
				F.Global.XML.CreateElementNode(v.local.sXML,"DrawingNo",v.DataTable.dt(v.Local.i).DRAW!FIELDVALTRIM)
				F.Global.XML.AppendNode(v.local.sXML,"ProductionOrder","DrawingNo")
				F.global.xml.appendNode(v.local.sXML,"DrawingNo",V.Local.shold)
				F.Global.XML.DestroyNode(v.local.sXML,"DrawingNo")
				F.Global.XML.AppendTextNode(v.local.sXML,"ProductionOrder",V.Ambient.NewLine)
				
				' CAD File	
				F.Global.XML.CreateElementNode(v.local.sXML,"CADFilename","")
				F.Global.XML.AppendNode(v.local.sXML,"ProductionOrder","CADFilename")
				F.global.xml.appendNode(v.local.sXML,"CADFilename",V.Local.Shold)
				F.Global.XML.DestroyNode(v.local.sXML,"CADFilename")
				F.Global.XML.AppendTextNode(v.local.sXML,"ProductionOrder",V.Ambient.NewLine)
				
				' Assembly
				F.Global.XML.CreateElementNode(v.local.sXML,"Assembly",v.DataTable.dt(v.Local.i).ASSEMBLY!FIELDVALTRIM)
				F.Global.XML.AppendNode(v.local.sXML,"ProductionOrder","Assembly")
				F.Global.Xml.AppendNode(v.local.sXML,"Assembly",V.Local.Shold)
				F.Global.XML.DestroyNode(v.local.sXML,"Assembly")
				F.Global.XML.AppendTextNode(v.local.sXML,"ProductionOrder",V.Ambient.NewLine)
				
				' Due Date
				F.Global.XML.CreateElementNode(v.local.sXML,"DueDate",v.DataTable.dt(v.Local.i).DATE_DUE!FIELDVAL)
				F.Global.XML.AppendNode(v.local.sXML,"ProductionOrder","DueDate")
				F.global.xml.appendNode(v.local.sXML,"DueDate",V.Local.shold)
				F.Global.XML.DestroyNode(v.local.sXML,"DueDate")
				F.Global.XML.AppendTextNode(v.local.sXML,"ProductionOrder",V.Ambient.NewLine)
				
				' Priority
				'Divide by 10 to cope with boost
				F.Intrinsic.Control.If(v.DataTable.dt(v.Local.i).PRIORITY!FIELDVALTRIM,=,"")
					V.Local.fRET.Set("0")
				F.Intrinsic.Control.ElseIf(v.DataTable.dt(v.Local.i).PRIORITY!FIELDVALTRIM,=,"0")
					V.Local.fRET.Set("0")
				F.Intrinsic.Control.Else
					F.Intrinsic.String.Right(v.DataTable.dt(v.Local.i).PRIORITY!FIELDVALTRIM,2,V.Local.fRET)
				F.Intrinsic.Control.EndIf
				F.Global.XML.CreateElementNode(v.local.sXML,"Priority",V.Local.fRET)
				F.Global.XML.AppendNode(v.local.sXML,"ProductionOrder","Priority")
				F.global.xml.appendNode(v.local.sXML,"Priority",V.Local.shold)
				F.Global.XML.DestroyNode(v.local.sXML,"Priority")
				F.Global.XML.AppendTextNode(v.local.sXML,"ProductionOrder",V.Ambient.NewLine)
				
				' Qty
				F.Global.XML.CreateElementNode(v.local.sXML,"DesiredQuantity",v.DataTable.dt(v.Local.i).Qty_Order!FIELDVAL)
				F.Global.XML.AppendNode(v.local.sXML,"ProductionOrder","DesiredQuantity")
				F.global.xml.appendNode(v.local.sXML,"DesiredQuantity",V.Local.shold)
				F.Global.XML.DestroyNode(v.local.sXML,"DesiredQuantity")
				F.Global.XML.AppendTextNode(v.local.sXML,"ProductionOrder",V.Ambient.NewLine)
				
				' Status
				'Per Metco Status should be 10, 30 later
				F.Global.XML.CreateElementNode(v.local.sXML,"Status","10")
				F.Global.XML.AppendNode(v.local.sXML,"ProductionOrder","Status")
				F.global.xml.appendNode(v.local.sXML,"Status",V.Local.shold)
				F.Global.XML.DestroyNode(v.local.sXML,"Status")
				F.Global.XML.AppendTextNode(v.local.sXML,"ProductionOrder",V.Ambient.NewLine)
				
				' Workcenter
				F.Global.XML.CreateElementNode(v.local.sXML,"WorkplanName","")
				F.Global.XML.AppendNode(v.local.sXML,"ProductionOrder","WorkplanName")
				F.global.xml.appendNode(v.local.sXML,"WorkplanName",V.Local.shold)
				F.Global.XML.DestroyNode(v.local.sXML,"WorkplanName")
				F.Global.XML.AppendTextNode(v.local.sXML,"ProductionOrder",V.Ambient.NewLine)
				
				' Material
				'Find the material from QRE
				f.Intrinsic.String.Build("SELECT PART FROM V_JOB_OPERATIONS WHERE JOB='{0}' AND SUFFIX='{1}' AND CODE_SORT_OPER='MAT'",v.datatable.dt(v.Local.i).job!FIELDVAL,v.datatable.dt(v.Local.i).SUFFIX!FIELDVAL,v.Local.ssql)
				f.ODBC.Connection!conx.executeandreturn(v.Local.sSQL,v.Local.sMat)
				F.Global.XML.CreateElementNode(v.local.sXML,"Material",V.Local.sMat.Trim)
				F.Global.XML.AppendNode(v.local.sXML,"ProductionOrder","Material")
				F.global.xml.appendNode(v.local.sXML,"Material",V.Local.shold)
				F.Global.XML.DestroyNode(v.local.sXML,"Material")
				F.Global.XML.AppendTextNode(v.local.sXML,"ProductionOrder",V.Ambient.NewLine)
				
				' FillerPartsOrder
				F.Global.XML.CreateElementNode(v.local.sXML,"FillerPartsOrder","")
				F.Global.XML.AppendNode(v.local.sXML,"ProductionOrder","FillerPartsOrder")
				F.global.xml.appendNode(v.local.sXML,"FillerPartsOrder",V.Local.shold)
				F.Global.XML.DestroyNode(v.local.sXML,"FillerPartsOrder")
				F.Global.XML.AppendTextNode(v.local.sXML,"ProductionOrder",V.Ambient.NewLine)
				
				F.Global.XML.DestroyNode(v.local.sXML,"ProductionOrder")
				F.Global.XML.AppendTextNode(v.local.sXML,"ProductionOrder",V.Ambient.NewLine)
			f.Intrinsic.Control.Else
				f.Intrinsic.String.Build("Error: Programming Laser (PROJ) workcentre step missing from work order {0}-{1}.  Skipping boost export.",v.DataTable.dt(v.Local.i).JOB!FIELDVALTRIM,v.DataTable.dt(v.Local.i).SUFFIX!FIELDVALTRIM,v.Local.sMsg)
				f.Intrinsic.UI.Msgbox(v.Local.sMsg)
			f.Intrinsic.Control.EndIf
		f.Intrinsic.Control.EndIf
	f.Intrinsic.Control.Next(v.Local.i)
	F.Global.XML.AppendNodeToRoot(v.local.sXML,"ProductionOrders")
	F.Global.XML.AppendTextNode(v.local.sXML,"ProductionOrders",V.Ambient.NewLine)
	F.Global.XML.DestroyNode(v.local.sXML,"ProductionOrders")
	F.Global.XML.DestroyNode(v.local.sXML,"ErpExchange")
	
	'Create File Name
	F.Intrinsic.String.Build("ProdOrderImp{0}.xml",V.Local.sJSS,V.Local.sFileName)
	'f.Intrinsic.String.Concat(v.Caller.LocalGSSTempDir,"\",v.Local.sPath)
	f.Intrinsic.String.Concat("\\vmetcott1\pps\prodAuftrag\import\","",v.Local.sPath)
	F.global.xml.saveDocument(v.local.sXML,V.local.sPath,V.Local.sFileName)
	'close document
	F.global.xml.CloseDocument(v.local.sXML)
f.Intrinsic.Control.Catch
	f.Intrinsic.UI.Msgbox(v.Ambient.ErrorDescription)
f.Intrinsic.Control.EndTry
Program.Sub.BoostGen.End

Program.Sub.createBoostTable.Start
f.Intrinsic.Control.If(v.DataTable.dt.Exists)
	f.Data.DataTable.Close("dt")
f.Intrinsic.Control.EndIf

f.Data.DataTable.Create("dt",true)
f.Data.DataTable.AddColumn("dt","Job","string")
f.Data.DataTable.AddColumn("dt","Suffix","string")
f.Data.DataTable.AddColumn("dt","Part","string")
f.Data.DataTable.AddColumn("dt","Description","string")
f.Data.DataTable.AddColumn("dt","ParentJob","string")
f.Data.DataTable.AddColumn("dt","ParentSuffix","string")
f.Data.DataTable.AddColumn("dt","Customer","string")
f.Data.DataTable.AddColumn("dt","Customer_PO","string")
f.Data.DataTable.AddColumn("dt","Sales_Order","string")
f.Data.DataTable.AddColumn("dt","DATE_DUE","string")
f.Data.DataTable.AddColumn("dt","NAME_CUSTOMER","string")
f.Data.DataTable.AddColumn("dt","PRIORITY","string")
f.Data.DataTable.AddColumn("dt","Qty_Order","string")
f.Data.DataTable.AddColumn("dt","Draw","string")
f.Data.DataTable.AddColumn("dt","BoostID","string")
f.Data.DataTable.AddColumn("dt","Sales_Order_Line","string")
Program.Sub.createBoostTable.End

Program.Sub.BoostExport.Start
f.Intrinsic.Control.CallSub(resched,"sSwitch","B")
Program.Sub.BoostExport.End

Program.Sub.Resched.Start
f.Intrinsic.Control.Try
	v.Local.sSwitch.Declare(string)
	v.Local.SSQL.Declare(STRING)
	v.Local.irows.Declare(long)
	V.Local.iRows.Set(0)
	v.Local.i.Declare(long)
	v.Local.ddate.Declare(date)
	v.Local.sdate.Declare(string)
	V.Local.SDATELong.declare(string)
	V.Local.sDateUS.Declare(string)
	V.Local.DDATEUS.Declare(date)
	V.Local.SDUE.Declare(STRING)
	v.Local.sDateSched.declare(string)
	v.Local.sparams.Declare(string)
	v.Local.sMessage.Declare(string)
	v.Local.sret.Declare(string)
	v.Local.lret.Declare(long)
	V.Local.sFilename.Declare(string)
	V.Local.sfilename.Set("ROUTERHD.TXT")
	V.Local.sFilenameBOM.Declare(string)
	V.Local.sfilenameBOM.Set("BOMHDR.txt")
	v.Local.sFileDir.Declare(string)
	V.Local.spart.Declare(string)
	V.Local.spartrev.Declare(string)
	v.Local.fSuffix.Declare(float)
	v.Local.sSuffix.Declare(string)
	v.Local.lID.Declare(long)
	V.Local.sNames.Declare(string)
	v.Local.sName.Declare(string)
	v.Local.scustsql.Declare(string)
	v.Local.sValues.Declare(string)
	v.Local.sVal.Declare(string)
	v.Local.sBoostID.Declare(string)
	v.Local.scustpart.Declare(string)
	v.Local.scustrev.Declare(string)
	v.Local.x.Declare(long)
	v.Local.y.Declare(long)
	v.Local.bExit.Declare(boolean)
	v.Local.lHid.Declare
	V.Local.p.Declare(long)
	v.Local.o.Declare(long)
	v.Local.sRouter.Declare
	v.Local.sretPH.Declare
	v.Local.sSplit.Declare
	v.Local.sGssPart.Declare

	v.Local.sSwitch.Set(v.Args.sSwitch)
	f.ODBC.Connection!conx.openconnection(v.Ambient.PDSN,v.Ambient.PUser,v.Ambient.PPass)
			
	f.Intrinsic.Control.If(v.DataTable.dtWO.Exists)
		f.Data.DataTable.Close("dtWO")
	f.Intrinsic.Control.EndIf
	f.Intrinsic.Control.If(v.DataTable.dtWOP.Exists)
		f.Data.DataTable.Close("dtWOP")
	f.Intrinsic.Control.EndIf
	
	'Datatable for storing original work orders' position in the grid control
	f.Data.DataTable.Create("dtWO")
	f.Data.DataTable.AddColumn("dtWO","SO","string")
	f.Data.DataTable.AddColumn("dtWO","SOLine","string")
	f.Data.DataTable.AddColumn("dtWO","SODueDate","string")
	f.Data.DataTable.AddColumn("dtWO","OrigRow","long")
	
	'Datatable for printing work orders
	f.Data.DataTable.Create("dtWOP")
	f.Data.DataTable.AddColumn("dtWOP","WO","String")
	f.Data.DataTable.AddColumn("dtWOP","Suffix","string")
	
	'Blank the Router & BOM File
	F.Intrinsic.String.Concat(V.Caller.FilesDir,"\",V.Local.sfilename,V.Local.sFileDir)
	f.Intrinsic.File.STRING2FILE(V.Local.sFileDir,"")
	V.Local.sFileDir.Set("")
	F.Intrinsic.String.Concat(V.Caller.FilesDir,"\",V.Local.sFilenameBOM,V.Local.sFileDir)
	f.Intrinsic.File.STRING2FILE(V.Local.sFileDir,"")
	
	'Start the process of formatting the files for BOM/ROUTER for upload into Global Shop
	f.Intrinsic.Control.If(v.Local.sSwitch,=,"N")
		f.Intrinsic.String.Concat("Create work orders for sales orders: ",V.Ambient.NewLine,v.Local.sMessage)
	F.Intrinsic.Control.ElseIf(v.Local.sSwitch,=,"B")
		f.Intrinsic.String.Concat("Export work orders to boost: ",V.Ambient.NewLine,v.Local.sMessage)
	f.Intrinsic.Control.Else
		f.Intrinsic.String.Concat("Reschedule work orders: ",v.Ambient.NewLine,v.Local.sMessage)
	f.Intrinsic.Control.EndIf
	f.Intrinsic.Control.For(v.Local.i,0,v.DataTable.dtAll2.RowCount--,1)
		f.Intrinsic.Control.If(v.DataTable.dtAll2(v.Local.i).SelectWO!fieldval,=,"True")
			f.Intrinsic.String.Concat(v.Local.sMessage," ",v.DataTable.dtAll2(v.Local.i).Job!fieldval,"-",v.DataTable.dtAll2(v.Local.i).Suffix!fieldval," ",V.DataTable.dtAll2(V.Local.I).qty_order!FIELDVALTrim," of ",V.DataTable.dtAll2(V.Local.I).Display_part!FieldvalTrim," ",v.Ambient.NewLine,V.Local.sMessage)
			f.Intrinsic.String.Mid(v.DataTable.dtAll2(v.Local.i).Display_part!FIELDVAL,18,3,v.Local.spartrev)
			f.Intrinsic.String.mid(v.DataTable.dtAll2(v.Local.i).Display_part!FIELDVAL,1,17,v.Local.spart)
			f.Data.DataTable.AddRow("dtWO","SO",v.DataTable.dtAll2(v.Local.i).SALES_ORDER!FIELDVAL,"SOLine",v.DataTable.dtAll2(v.Local.i).SALES_ORDER_LINE!Fieldval,"SODueDate",v.DataTable.dtAll2(v.Local.i).DATE_DUE!FIELDVALString,"OrigRow",v.Local.i)
		f.Intrinsic.Control.EndIf
	f.Intrinsic.Control.Next(v.Local.i)
	
	f.Intrinsic.UI.Msgbox(v.Local.sMessage,"Confirmation",4,v.Local.lret)
	'Reset i before continuing on
	v.Local.i.Set(0)
	
	f.Intrinsic.Control.If(v.Local.lret,=,6)
		f.Intrinsic.UI.InvokeWaitDialog("Generating.")
		
		'Bumped this out after the fact, let the scheduling happen as is for speed reasons
		'AFter WO creation, grab the WO number
		F.Intrinsic.Control.For(V.Local.i,0,v.DataTable.dtWO.RowCount--,1)
			v.Local.ddate.Set(V.DataTable.dtWO(v.Local.i).SODueDate!FieldValString)
			'Get Work Order and Suffix
			f.Intrinsic.String.Build("SELECT JOB, SUFFIX, PART FROM V_ORDER_TO_WO WHERE ORDER_NO='{0}' AND ORDER_LINE='{1}0'",v.DataTable.dtWO(v.local.i).SO!fieldvaltrim,v.DataTable.dtWO(v.local.i).SOLine!fieldvaltrim,v.Local.SSQL)
			f.ODBC.Connection!con.executeandreturn(v.Local.SSQL,v.Local.sret)
			f.Intrinsic.String.Split(v.Local.sret,"*!*",v.Local.sret)
			
			f.Intrinsic.Control.If(v.Local.sSwitch,=,"B")
				f.Intrinsic.Control.CallSub(createBoostTable)
				'Add Parent Row
				f.Intrinsic.String.Build("SELECT JOB, Suffix, Part, Description, parent_wo as ParentJob, parent_suffix_parent as ParentSuffix, Customer, customer_po, sales_order, Qty_Order, Priority, date_due  FROM V_JOB_HEADER WHERE JOB='{0}' AND SUFFIX='{1}'",v.Local.sret(0),v.Local.sret(1),v.Local.SSQL)
				f.ODBC.Connection!conx.executeandreturn(v.Local.SSQL,v.Local.sval)
				f.Intrinsic.String.Split(v.Local.sVal,"*!*",v.Local.sVal)
				f.Intrinsic.String.build("SELECT NAME_CUSTOMER FROM V_CUSTOMER_MASTER WHERE CUSTOMER='{0}'",v.Local.sVal(6),v.Local.scustsql)
				f.ODBC.Connection!conx.executeandreturn(v.Local.scustsql,v.Local.sname)
				F.Intrinsic.String.Mid(V.Local.sVal(2),18,3,V.LOCAL.scustrev)
				F.Intrinsic.String.Mid(V.Local.sVal(2),1,17,V.Local.scustpart)
				f.Intrinsic.String.Build("SELECT ROUTER FROM GAB_4486_QRE_HEAD WHERE CUST_PART='{0}' and CUST_REV='{1}'",v.Local.scustpart.Trim,v.Local.scustrev.Trim,v.Local.ssql)
				f.ODBC.Connection!conx.executeandreturn(v.Local.SSQL,v.Local.sBoostID)
				F.Data.DataTable.AddRow("dt","Draw",v.Local.sVal(2),"BoostID",v.Local.sBoostID,"JOB",v.Local.sVal(0),"Suffix",v.Local.sVal(1),"Part",v.Local.sVal(2),"Description",v.Local.sVal(3),"ParentJob",v.Local.sVal(4),"ParentSuffix",v.Local.sVal(5),"Customer",v.Local.sVal(6),"Customer_PO",v.Local.sVal(7),"Sales_Order",v.DataTable.dtWO(v.local.i).SO!fieldvaltrim,"Sales_Order_Line",v.DataTable.dtWO(v.local.i).SOLine!fieldvaltrim,"Qty_Order",v.Local.sVal(9),"PRIORITY",v.Local.sVal(10),"DATE_DUE",v.Local.sVal(11),"NAME_CUSTOMER",V.Local.sName.Trim)
				'Get Children
				F.Intrinsic.Control.CallSub(loadbomlevel,"sWOH",v.Local.sret(0),"sWOS",v.Local.sret(1))
				'Add in parent assembly
				f.Data.DataTable.AddColumn("dt","Assembly","string",v.Local.sret(2))
				f.Intrinsic.Control.CallSub(BoostGen)
			f.Intrinsic.Control.EndIf
			
			'If Suffix = '000' then it is a BOM and need to grab the others
			f.Intrinsic.Control.If(v.Local.sret.UBound,>=,1)
				F.Intrinsic.Control.If(V.Local.sret(1),=,"000")
					f.Intrinsic.string.Build("select max(suffix) from V_JOB_HEADER  where job='{0}'",v.Local.sret(0),v.Local.SSQL)
					f.ODBC.Connection!conx.executeandreturn(v.Local.SSQL,v.Local.fSuffix)
					f.Intrinsic.Control.For(v.Local.x,1,v.Local.fSuffix,1)
						f.Intrinsic.String.LPad(v.Local.x,"0",3,v.Local.sSuffix)
						f.Data.DataTable.AddRow("dtWOP","WO",v.Local.sret(0),"Suffix",v.Local.sSuffix)
					f.Intrinsic.Control.next(v.Local.x)
				F.Intrinsic.Control.EndIf
			f.Intrinsic.Control.EndIf
			v.Local.fSuffix.Set(1)
		f.Intrinsic.Control.Next(v.Local.i)

		f.Intrinsic.UI.CloseWaitDialog
	f.Intrinsic.Control.EndIf
	f.ODBC.Connection!conx.Close

f.Intrinsic.Control.Catch
	f.Intrinsic.UI.Msgbox(v.Ambient.ErrorDescription)
	f.ODBC.Connection!conx.Close
	f.Intrinsic.Control.End
f.Intrinsic.Control.endtry
Program.Sub.Resched.End

Program.Sub.LoadBOMLevel.Start
V.Local.bDT.Declare(Boolean,False)
V.Local.fAct.Declare
V.Local.fEst.Declare
V.Local.i.Declare
V.Local.iCLevel.Declare
V.Local.iLevel.Declare
V.Local.sDTName.Declare
V.Local.sFilter.Declare
V.Local.sParentSuffix.Declare
V.Local.sRet.Declare
V.Local.sSQL.Declare
V.Local.sWOH.Declare
v.Local.sWOS.Declare
v.Local.sJobI.Declare
v.Local.sCustSQL.Declare
v.Local.sName.Declare
v.Local.sBoostID.Declare
v.Local.sCustrev.Declare
v.locaL.scustpart.declare

v.Local.sWOH.Set(v.Args.sWOH)
v.Local.sWOS.Set(v.Args.sWOS)

f.Intrinsic.Control.If(v.DataTable.dtJobTemp.Exists)
	f.Data.DataTable.Close("dtJobTemp")
f.Intrinsic.Control.EndIf

F.Intrinsic.String.Build("select JOB, Suffix, Qty_Order, Priority, Part, Description, parent_wo as ParentJob, parent_suffix_parent as ParentSuffix, Customer, customer_po, sales_order, date_due, drawing_customer from V_JOB_HEADER where parent_wo = '{0}' and parent_suffix_parent = '{1}' order by suffix ASC",V.Local.sWOH,V.Local.sWOS,V.Local.sSQL)

F.Data.DataTable.CreateFromSQL("dtJobTemp","conx",V.Local.sSQL,true)
f.Intrinsic.Control.For(v.Local.i,0,v.DataTable.dtJobTemp.RowCount--,1)
	'Get Name Customer
	f.Intrinsic.String.Build("SELECT NAME_CUSTOMER FROM V_CUSTOMER_MASTER WHERE CUSTOMER='{0}'",v.DataTable.dtJobTemp(v.Local.i).CUSTOMER!fieldvaltrim,v.Local.sCustSQL)
	f.ODBC.Connection!conx.executeandreturn(v.Local.sCustSQL,V.Local.sName)
	
	'Get Boost ID
	F.Intrinsic.String.Mid(V.DataTable.dtJobTemp(v.Local.i).PART!FIELDVALTRIM,18,3,V.LOCAL.scustrev)
	F.Intrinsic.String.Mid(V.DataTable.dtJobTemp(v.Local.i).PART!FIELDVALTRIM,1,17,V.Local.scustpart)
	f.Intrinsic.String.Build("SELECT ROUTER FROM GAB_4486_QRE_HEAD WHERE CUST_PART='{0}' and CUST_REV='{1}'",v.Local.scustpart.Trim,v.Local.scustrev.Trim,v.Local.ssql)
	f.ODBC.Connection!conx.executeandreturn(v.Local.SSQL,v.Local.sBoostID)
	
	'Add to Datatable
	F.Data.DataTable.AddRow("dt","BoostID",v.Local.sBoostID,"Draw",v.DataTable.dtJobTemp(v.Local.i).Drawing_Customer!FIELDVAL,"Qty_Order",v.DataTable.dtJobTemp(v.Local.i).QTY_ORDER!FIELDVAL,"PRIORITY",v.DataTable.dtJobTemp(v.Local.i).PRIORITY!FIELDVALTRIM,"NAME_CUSTOMER",V.Local.sName.Trim,"DATE_DUE",V.DataTable.dtJobTemp(V.Local.i).DATE_DUE!FieldValTrim,"JOB",V.DataTable.dtJobTemp(V.Local.i).JOB!FieldValTrim,"Suffix",V.DataTable.dtJobTemp(V.Local.i).Suffix!FieldValTrim,"Part",V.DataTable.dtJobTemp(V.Local.i).Part!FieldValTrim,"Description",V.DataTable.dtJobTemp(V.Local.i).Description!FieldValTrim,"ParentJob",V.DataTable.dtJobTemp(V.Local.i).ParentJob!FieldValTrim,"ParentSuffix",V.DataTable.dtJobTemp(V.Local.i).ParentSuffix!FieldValTrim,"Customer",V.DataTable.dtJobTemp(V.Local.i).customer!FieldValTrim,"Customer_PO",V.DataTable.dtJobTemp(V.Local.i).Customer_PO!FieldValTrim,"Sales_Order",V.DataTable.dtJobTemp(V.Local.i).sales_order!FieldValTrim)
	
	F.Intrinsic.String.Build("select distinct job, suffix,part,description from v_job_header where parent_wo = '{0}' and parent_suffix_parent = '{1}'",V.DataTable.dtJobTemp(V.Local.i).JOB!FieldValTrim,V.DataTable.dtJobTemp(V.Local.i).Suffix!FieldValTrim,V.Local.sSQL)
	f.ODBC.Connection!conx.executeandreturn(v.Local.sSQL,v.Local.sret)
	f.Intrinsic.Control.If(v.Local.sRet.Trim,<>,"")
		F.Intrinsic.Control.CallSub(loadbomlevel,"sWOH",V.DataTable.dtJobTemp(V.Local.i).JOB!FieldValTrim,"sWOS",v.DataTable.dtJobTemp(v.Local.i).SUFFIX!FIELDVALTRIM)
	F.Intrinsic.Control.EndIf
f.Intrinsic.Control.Next(v.Local.i)

Program.Sub.LoadBOMLevel.End

Program.Sub.Comments.Start
${$5$}$3.0.0.0$}$1
${$6$}$bnguyen$}$20210909124333394$}$tqzwddZCkmoVRWHEL6DZymEEseDhOdziNjrZRgQT+ixR3pKhLNXIblu+z/5JCMg7RVYxzfVX/as=
Program.Sub.Comments.End